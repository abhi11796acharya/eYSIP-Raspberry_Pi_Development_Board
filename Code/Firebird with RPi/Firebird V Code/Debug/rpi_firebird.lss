
rpi_firebird.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000105c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000008b  00800200  00800200  000010d0  2**0
                  ALLOC
  2 .stab         00001bfc  00000000  00000000  000010d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000583  00000000  00000000  00002ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00003250  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000130b  00000000  00000000  000032f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000032d  00000000  00000000  000045fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006d3  00000000  00000000  00004928  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000047c  00000000  00000000  00004ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000632  00000000  00000000  00005478  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006d3  00000000  00000000  00005aaa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <__vector_5>
      18:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 11 04 	jmp	0x822	; 0x822 <__vector_51>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ec e5       	ldi	r30, 0x5C	; 92
      fc:	f0 e1       	ldi	r31, 0x10	; 16
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 30       	cpi	r26, 0x00	; 0
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ab 38       	cpi	r26, 0x8B	; 139
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 8c 06 	call	0xd18	; 0xd18 <main>
     122:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_port_config>:
unsigned int million;

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     12a:	87 b1       	in	r24, 0x07	; 7
     12c:	87 6f       	ori	r24, 0xF7	; 247
     12e:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     130:	88 b1       	in	r24, 0x08	; 8
     132:	80 78       	andi	r24, 0x80	; 128
     134:	88 b9       	out	0x08, r24	; 8
}
     136:	08 95       	ret

00000138 <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     138:	86 e6       	ldi	r24, 0x66	; 102
     13a:	9e e0       	ldi	r25, 0x0E	; 14
     13c:	01 97       	sbiw	r24, 0x01	; 1
     13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_set_4bit+0x4>
     140:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     142:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     144:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     146:	80 e3       	ldi	r24, 0x30	; 48
     148:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     14a:	42 9a       	sbi	0x08, 2	; 8
     14c:	ef ef       	ldi	r30, 0xFF	; 255
     14e:	f7 e4       	ldi	r31, 0x47	; 71
     150:	31 97       	sbiw	r30, 0x01	; 1
     152:	f1 f7       	brne	.-4      	; 0x150 <lcd_set_4bit+0x18>
     154:	00 c0       	rjmp	.+0      	; 0x156 <lcd_set_4bit+0x1e>
     156:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     158:	42 98       	cbi	0x08, 2	; 8
     15a:	e6 e6       	ldi	r30, 0x66	; 102
     15c:	fe e0       	ldi	r31, 0x0E	; 14
     15e:	31 97       	sbiw	r30, 0x01	; 1
     160:	f1 f7       	brne	.-4      	; 0x15e <lcd_set_4bit+0x26>
     162:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     164:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     166:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     168:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     16a:	42 9a       	sbi	0x08, 2	; 8
     16c:	ef ef       	ldi	r30, 0xFF	; 255
     16e:	f7 e4       	ldi	r31, 0x47	; 71
     170:	31 97       	sbiw	r30, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x38>
     174:	00 c0       	rjmp	.+0      	; 0x176 <lcd_set_4bit+0x3e>
     176:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     178:	42 98       	cbi	0x08, 2	; 8
     17a:	e6 e6       	ldi	r30, 0x66	; 102
     17c:	fe e0       	ldi	r31, 0x0E	; 14
     17e:	31 97       	sbiw	r30, 0x01	; 1
     180:	f1 f7       	brne	.-4      	; 0x17e <lcd_set_4bit+0x46>
     182:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     184:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     186:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     188:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     18a:	42 9a       	sbi	0x08, 2	; 8
     18c:	8f ef       	ldi	r24, 0xFF	; 255
     18e:	97 e4       	ldi	r25, 0x47	; 71
     190:	01 97       	sbiw	r24, 0x01	; 1
     192:	f1 f7       	brne	.-4      	; 0x190 <lcd_set_4bit+0x58>
     194:	00 c0       	rjmp	.+0      	; 0x196 <lcd_set_4bit+0x5e>
     196:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     198:	42 98       	cbi	0x08, 2	; 8
     19a:	e6 e6       	ldi	r30, 0x66	; 102
     19c:	fe e0       	ldi	r31, 0x0E	; 14
     19e:	31 97       	sbiw	r30, 0x01	; 1
     1a0:	f1 f7       	brne	.-4      	; 0x19e <lcd_set_4bit+0x66>
     1a2:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1a4:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1a6:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     1a8:	80 e2       	ldi	r24, 0x20	; 32
     1aa:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1ac:	42 9a       	sbi	0x08, 2	; 8
     1ae:	86 e6       	ldi	r24, 0x66	; 102
     1b0:	9e e0       	ldi	r25, 0x0E	; 14
     1b2:	01 97       	sbiw	r24, 0x01	; 1
     1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_set_4bit+0x7a>
     1b6:	00 00       	nop
	_delay_ms(1);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1b8:	42 98       	cbi	0x08, 2	; 8

	
}
     1ba:	08 95       	ret

000001bc <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     1bc:	98 b1       	in	r25, 0x08	; 8
     1be:	9f 70       	andi	r25, 0x0F	; 15
     1c0:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     1c2:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     1c4:	28 2f       	mov	r18, r24
     1c6:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     1c8:	92 2b       	or	r25, r18
     1ca:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     1cc:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1ce:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1d0:	42 9a       	sbi	0x08, 2	; 8
     1d2:	ef ef       	ldi	r30, 0xFF	; 255
     1d4:	f7 e4       	ldi	r31, 0x47	; 71
     1d6:	31 97       	sbiw	r30, 0x01	; 1
     1d8:	f1 f7       	brne	.-4      	; 0x1d6 <lcd_wr_command+0x1a>
     1da:	00 c0       	rjmp	.+0      	; 0x1dc <lcd_wr_command+0x20>
     1dc:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     1de:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     1e0:	98 b1       	in	r25, 0x08	; 8
     1e2:	9f 70       	andi	r25, 0x0F	; 15
     1e4:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     1e6:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     1e8:	82 95       	swap	r24
     1ea:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     1ec:	89 2b       	or	r24, r25
     1ee:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     1f0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1f2:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1f4:	42 9a       	sbi	0x08, 2	; 8
     1f6:	8f ef       	ldi	r24, 0xFF	; 255
     1f8:	97 e4       	ldi	r25, 0x47	; 71
     1fa:	01 97       	sbiw	r24, 0x01	; 1
     1fc:	f1 f7       	brne	.-4      	; 0x1fa <lcd_wr_command+0x3e>
     1fe:	00 c0       	rjmp	.+0      	; 0x200 <lcd_wr_command+0x44>
     200:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     202:	42 98       	cbi	0x08, 2	; 8
}
     204:	08 95       	ret

00000206 <lcd_init>:
     206:	86 e6       	ldi	r24, 0x66	; 102
     208:	9e e0       	ldi	r25, 0x0E	; 14
     20a:	01 97       	sbiw	r24, 0x01	; 1
     20c:	f1 f7       	brne	.-4      	; 0x20a <lcd_init+0x4>
     20e:	00 00       	nop
//Function to Initialize LCD
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     210:	88 e2       	ldi	r24, 0x28	; 40
     212:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_wr_command>
	lcd_wr_command(0x01);
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_wr_command>
	lcd_wr_command(0x06);
     21c:	86 e0       	ldi	r24, 0x06	; 6
     21e:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_wr_command>
	lcd_wr_command(0x0E);
     222:	8e e0       	ldi	r24, 0x0E	; 14
     224:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_wr_command>
	lcd_wr_command(0x80);
     228:	80 e8       	ldi	r24, 0x80	; 128
     22a:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_wr_command>
		
}
     22e:	08 95       	ret

00000230 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     230:	98 b1       	in	r25, 0x08	; 8
     232:	9f 70       	andi	r25, 0x0F	; 15
     234:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     236:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     238:	28 2f       	mov	r18, r24
     23a:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     23c:	92 2b       	or	r25, r18
     23e:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     240:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     242:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     244:	42 9a       	sbi	0x08, 2	; 8
     246:	ef ef       	ldi	r30, 0xFF	; 255
     248:	f7 e4       	ldi	r31, 0x47	; 71
     24a:	31 97       	sbiw	r30, 0x01	; 1
     24c:	f1 f7       	brne	.-4      	; 0x24a <lcd_wr_char+0x1a>
     24e:	00 c0       	rjmp	.+0      	; 0x250 <lcd_wr_char+0x20>
     250:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     252:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     254:	98 b1       	in	r25, 0x08	; 8
     256:	9f 70       	andi	r25, 0x0F	; 15
     258:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     25a:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     25c:	82 95       	swap	r24
     25e:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     260:	89 2b       	or	r24, r25
     262:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     264:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     266:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     268:	42 9a       	sbi	0x08, 2	; 8
     26a:	8f ef       	ldi	r24, 0xFF	; 255
     26c:	97 e4       	ldi	r25, 0x47	; 71
     26e:	01 97       	sbiw	r24, 0x01	; 1
     270:	f1 f7       	brne	.-4      	; 0x26e <lcd_wr_char+0x3e>
     272:	00 c0       	rjmp	.+0      	; 0x274 <lcd_wr_char+0x44>
     274:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     276:	42 98       	cbi	0x08, 2	; 8
}
     278:	08 95       	ret

0000027a <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     27a:	80 e8       	ldi	r24, 0x80	; 128
     27c:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_wr_command>
}
     280:	08 95       	ret

00000282 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	ec 01       	movw	r28, r24
	while(*str != '\0')
     288:	88 81       	ld	r24, Y
     28a:	88 23       	and	r24, r24
     28c:	31 f0       	breq	.+12     	; 0x29a <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
     28e:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     290:	0e 94 18 01 	call	0x230	; 0x230 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     294:	89 91       	ld	r24, Y+
     296:	88 23       	and	r24, r24
     298:	d9 f7       	brne	.-10     	; 0x290 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	08 95       	ret

000002a0 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     2a0:	82 30       	cpi	r24, 0x02	; 2
     2a2:	79 f0       	breq	.+30     	; 0x2c2 <lcd_cursor+0x22>
     2a4:	83 30       	cpi	r24, 0x03	; 3
     2a6:	18 f4       	brcc	.+6      	; 0x2ae <lcd_cursor+0xe>
     2a8:	81 30       	cpi	r24, 0x01	; 1
     2aa:	c9 f4       	brne	.+50     	; 0x2de <lcd_cursor+0x3e>
     2ac:	05 c0       	rjmp	.+10     	; 0x2b8 <lcd_cursor+0x18>
     2ae:	83 30       	cpi	r24, 0x03	; 3
     2b0:	69 f0       	breq	.+26     	; 0x2cc <lcd_cursor+0x2c>
     2b2:	84 30       	cpi	r24, 0x04	; 4
     2b4:	a1 f4       	brne	.+40     	; 0x2de <lcd_cursor+0x3e>
     2b6:	0f c0       	rjmp	.+30     	; 0x2d6 <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     2b8:	86 2f       	mov	r24, r22
     2ba:	81 58       	subi	r24, 0x81	; 129
     2bc:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_wr_command>
     2c0:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     2c2:	86 2f       	mov	r24, r22
     2c4:	81 54       	subi	r24, 0x41	; 65
     2c6:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_wr_command>
     2ca:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     2cc:	86 2f       	mov	r24, r22
     2ce:	8d 56       	subi	r24, 0x6D	; 109
     2d0:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_wr_command>
     2d4:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     2d6:	86 2f       	mov	r24, r22
     2d8:	8d 52       	subi	r24, 0x2D	; 45
     2da:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_wr_command>
     2de:	08 95       	ret

000002e0 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     2e0:	0f 93       	push	r16
     2e2:	1f 93       	push	r17
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	8a 01       	movw	r16, r20
     2ea:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     2ec:	88 23       	and	r24, r24
     2ee:	11 f0       	breq	.+4      	; 0x2f4 <lcd_print+0x14>
     2f0:	66 23       	and	r22, r22
     2f2:	19 f4       	brne	.+6      	; 0x2fa <lcd_print+0x1a>
	{
		lcd_home();
     2f4:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_home>
     2f8:	02 c0       	rjmp	.+4      	; 0x2fe <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     2fa:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     2fe:	c5 30       	cpi	r28, 0x05	; 5
     300:	d1 05       	cpc	r29, r1
     302:	71 f4       	brne	.+28     	; 0x320 <lcd_print+0x40>
	{
		million=value/10000+48;
     304:	c8 01       	movw	r24, r16
     306:	60 e1       	ldi	r22, 0x10	; 16
     308:	77 e2       	ldi	r23, 0x27	; 39
     30a:	0e 94 18 08 	call	0x1030	; 0x1030 <__udivmodhi4>
     30e:	cb 01       	movw	r24, r22
     310:	c0 96       	adiw	r24, 0x30	; 48
     312:	90 93 52 02 	sts	0x0252, r25
     316:	80 93 51 02 	sts	0x0251, r24
		lcd_wr_char(million);
     31a:	0e 94 18 01 	call	0x230	; 0x230 <lcd_wr_char>
     31e:	03 c0       	rjmp	.+6      	; 0x326 <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     320:	c4 30       	cpi	r28, 0x04	; 4
     322:	d1 05       	cpc	r29, r1
     324:	b9 f4       	brne	.+46     	; 0x354 <lcd_print+0x74>
	{
		temp = value/1000;
     326:	c8 01       	movw	r24, r16
     328:	68 ee       	ldi	r22, 0xE8	; 232
     32a:	73 e0       	ldi	r23, 0x03	; 3
     32c:	0e 94 18 08 	call	0x1030	; 0x1030 <__udivmodhi4>
     330:	cb 01       	movw	r24, r22
     332:	70 93 56 02 	sts	0x0256, r23
     336:	60 93 55 02 	sts	0x0255, r22
		thousand = temp%10 + 48;
     33a:	6a e0       	ldi	r22, 0x0A	; 10
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	0e 94 18 08 	call	0x1030	; 0x1030 <__udivmodhi4>
     342:	c0 96       	adiw	r24, 0x30	; 48
     344:	90 93 89 02 	sts	0x0289, r25
     348:	80 93 88 02 	sts	0x0288, r24
		lcd_wr_char(thousand);
     34c:	0e 94 18 01 	call	0x230	; 0x230 <lcd_wr_char>
		flag=1;
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	01 c0       	rjmp	.+2      	; 0x356 <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     354:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     356:	c3 30       	cpi	r28, 0x03	; 3
     358:	d1 05       	cpc	r29, r1
     35a:	11 f0       	breq	.+4      	; 0x360 <lcd_print+0x80>
     35c:	81 30       	cpi	r24, 0x01	; 1
     35e:	b1 f4       	brne	.+44     	; 0x38c <lcd_print+0xac>
	{
		temp = value/100;
     360:	c8 01       	movw	r24, r16
     362:	64 e6       	ldi	r22, 0x64	; 100
     364:	70 e0       	ldi	r23, 0x00	; 0
     366:	0e 94 18 08 	call	0x1030	; 0x1030 <__udivmodhi4>
     36a:	cb 01       	movw	r24, r22
     36c:	70 93 56 02 	sts	0x0256, r23
     370:	60 93 55 02 	sts	0x0255, r22
		hundred = temp%10 + 48;
     374:	6a e0       	ldi	r22, 0x0A	; 10
     376:	70 e0       	ldi	r23, 0x00	; 0
     378:	0e 94 18 08 	call	0x1030	; 0x1030 <__udivmodhi4>
     37c:	c0 96       	adiw	r24, 0x30	; 48
     37e:	90 93 84 02 	sts	0x0284, r25
     382:	80 93 83 02 	sts	0x0283, r24
		lcd_wr_char(hundred);
     386:	0e 94 18 01 	call	0x230	; 0x230 <lcd_wr_char>
		flag=1;
     38a:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     38c:	c2 30       	cpi	r28, 0x02	; 2
     38e:	d1 05       	cpc	r29, r1
     390:	11 f0       	breq	.+4      	; 0x396 <lcd_print+0xb6>
     392:	81 30       	cpi	r24, 0x01	; 1
     394:	b1 f4       	brne	.+44     	; 0x3c2 <lcd_print+0xe2>
	{
		temp = value/10;
     396:	2a e0       	ldi	r18, 0x0A	; 10
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	c8 01       	movw	r24, r16
     39c:	b9 01       	movw	r22, r18
     39e:	0e 94 18 08 	call	0x1030	; 0x1030 <__udivmodhi4>
     3a2:	cb 01       	movw	r24, r22
     3a4:	70 93 56 02 	sts	0x0256, r23
     3a8:	60 93 55 02 	sts	0x0255, r22
		tens = temp%10 + 48;
     3ac:	b9 01       	movw	r22, r18
     3ae:	0e 94 18 08 	call	0x1030	; 0x1030 <__udivmodhi4>
     3b2:	c0 96       	adiw	r24, 0x30	; 48
     3b4:	90 93 58 02 	sts	0x0258, r25
     3b8:	80 93 57 02 	sts	0x0257, r24
		lcd_wr_char(tens);
     3bc:	0e 94 18 01 	call	0x230	; 0x230 <lcd_wr_char>
		flag=1;
     3c0:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     3c2:	c1 30       	cpi	r28, 0x01	; 1
     3c4:	d1 05       	cpc	r29, r1
     3c6:	11 f0       	breq	.+4      	; 0x3cc <lcd_print+0xec>
     3c8:	81 30       	cpi	r24, 0x01	; 1
     3ca:	61 f4       	brne	.+24     	; 0x3e4 <lcd_print+0x104>
	{
		unit = value%10 + 48;
     3cc:	c8 01       	movw	r24, r16
     3ce:	6a e0       	ldi	r22, 0x0A	; 10
     3d0:	70 e0       	ldi	r23, 0x00	; 0
     3d2:	0e 94 18 08 	call	0x1030	; 0x1030 <__udivmodhi4>
     3d6:	c0 96       	adiw	r24, 0x30	; 48
     3d8:	90 93 87 02 	sts	0x0287, r25
     3dc:	80 93 86 02 	sts	0x0286, r24
		lcd_wr_char(unit);
     3e0:	0e 94 18 01 	call	0x230	; 0x230 <lcd_wr_char>
	}
	if(digits>5)
     3e4:	c6 30       	cpi	r28, 0x06	; 6
     3e6:	d1 05       	cpc	r29, r1
     3e8:	1c f0       	brlt	.+6      	; 0x3f0 <lcd_print+0x110>
	{
		lcd_wr_char('E');
     3ea:	85 e4       	ldi	r24, 0x45	; 69
     3ec:	0e 94 18 01 	call	0x230	; 0x230 <lcd_wr_char>
	}
	
}
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	1f 91       	pop	r17
     3f6:	0f 91       	pop	r16
     3f8:	08 95       	ret

000003fa <buzzer_pin_config>:
//*******************************Pin Configuration Starts****************************

//**********************Buzzer*******************************
void buzzer_pin_config (void)
{
	DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
     3fa:	3b 9a       	sbi	0x07, 3	; 7
	PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     3fc:	43 98       	cbi	0x08, 3	; 8
}
     3fe:	08 95       	ret

00000400 <motion_pin_config>:

//**********************DC Motor*******************************
void motion_pin_config (void)
{
	DDRA = DDRA | 0x0F;
     400:	81 b1       	in	r24, 0x01	; 1
     402:	8f 60       	ori	r24, 0x0F	; 15
     404:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0;
     406:	82 b1       	in	r24, 0x02	; 2
     408:	80 7f       	andi	r24, 0xF0	; 240
     40a:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     40c:	ea e0       	ldi	r30, 0x0A	; 10
     40e:	f1 e0       	ldi	r31, 0x01	; 1
     410:	80 81       	ld	r24, Z
     412:	88 61       	ori	r24, 0x18	; 24
     414:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     416:	eb e0       	ldi	r30, 0x0B	; 11
     418:	f1 e0       	ldi	r31, 0x01	; 1
     41a:	80 81       	ld	r24, Z
     41c:	88 61       	ori	r24, 0x18	; 24
     41e:	80 83       	st	Z, r24
}
     420:	08 95       	ret

00000422 <left_encoder_pin_config>:

//**********************Encoder Left and Right*******************************
//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     422:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     424:	74 9a       	sbi	0x0e, 4	; 14
}
     426:	08 95       	ret

00000428 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     428:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     42a:	75 9a       	sbi	0x0e, 5	; 14
}
     42c:	08 95       	ret

0000042e <adc_pin_config>:

//**********************ADC*******************************
void adc_pin_config (void)
{
	DDRF = 0x00;  //set PORTF direction as input
     42e:	10 ba       	out	0x10, r1	; 16
	PORTF = 0x00; //set PORTF pins floating
     430:	11 ba       	out	0x11, r1	; 17
	DDRK = 0x00;  //set PORTK direction as input
     432:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0x00; //set PORTK pins floating
     436:	10 92 08 01 	sts	0x0108, r1
}
     43a:	08 95       	ret

0000043c <servo1_pin_config>:

//**********************Servo motors*******************************
void servo1_pin_config (void)
{
	DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     43c:	25 9a       	sbi	0x04, 5	; 4
	PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     43e:	2d 9a       	sbi	0x05, 5	; 5
}
     440:	08 95       	ret

00000442 <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
	DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     442:	26 9a       	sbi	0x04, 6	; 4
	PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     444:	2e 9a       	sbi	0x05, 6	; 5
}
     446:	08 95       	ret

00000448 <servo3_pin_config>:

//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
	DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
     448:	27 9a       	sbi	0x04, 7	; 4
	PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
     44a:	2f 9a       	sbi	0x05, 7	; 5
}
     44c:	08 95       	ret

0000044e <LED_bargraph_config>:

//**********************BarLEDs*******************************
void LED_bargraph_config (void)
{
	DDRJ = 0xFF;  //PORT J is configured as output
     44e:	8f ef       	ldi	r24, 0xFF	; 255
     450:	80 93 04 01 	sts	0x0104, r24
	PORTJ = 0x00; //Output is set to 0
     454:	10 92 05 01 	sts	0x0105, r1
}
     458:	08 95       	ret

0000045a <spi_pin_config>:

//**********************SPI(for sensors on ATmega8)*******************************
void spi_pin_config (void)
{
	DDRB = DDRB | 0x07;
     45a:	84 b1       	in	r24, 0x04	; 4
     45c:	87 60       	ori	r24, 0x07	; 7
     45e:	84 b9       	out	0x04, r24	; 4
	PORTB = PORTB | 0x07;
     460:	85 b1       	in	r24, 0x05	; 5
     462:	87 60       	ori	r24, 0x07	; 7
     464:	85 b9       	out	0x05, r24	; 5
}
     466:	08 95       	ret

00000468 <port_init>:

//**********************Port Initilizations*******************************
void port_init()
{
	lcd_port_config();
     468:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_port_config>
	motion_pin_config();
     46c:	0e 94 00 02 	call	0x400	; 0x400 <motion_pin_config>
	buzzer_pin_config();
     470:	0e 94 fd 01 	call	0x3fa	; 0x3fa <buzzer_pin_config>
	left_encoder_pin_config();
     474:	0e 94 11 02 	call	0x422	; 0x422 <left_encoder_pin_config>
	right_encoder_pin_config();
     478:	0e 94 14 02 	call	0x428	; 0x428 <right_encoder_pin_config>
	adc_pin_config();
     47c:	0e 94 17 02 	call	0x42e	; 0x42e <adc_pin_config>
	servo1_pin_config();
     480:	0e 94 1e 02 	call	0x43c	; 0x43c <servo1_pin_config>
	servo2_pin_config();
     484:	0e 94 21 02 	call	0x442	; 0x442 <servo2_pin_config>
	servo3_pin_config();
     488:	0e 94 24 02 	call	0x448	; 0x448 <servo3_pin_config>
	LED_bargraph_config();
     48c:	0e 94 27 02 	call	0x44e	; 0x44e <LED_bargraph_config>
	spi_pin_config();
     490:	0e 94 2d 02 	call	0x45a	; 0x45a <spi_pin_config>
}
     494:	08 95       	ret

00000496 <uart2_init>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart2_init(void)
{
	UCSR2B = 0x00; //disable while setting baud rate
     496:	e1 ed       	ldi	r30, 0xD1	; 209
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	10 82       	st	Z, r1
	UCSR2A = 0x00;
     49c:	10 92 d0 00 	sts	0x00D0, r1
	UCSR2C = 0x06;
     4a0:	86 e0       	ldi	r24, 0x06	; 6
     4a2:	80 93 d2 00 	sts	0x00D2, r24
	UBRR2L = 0x5F; //set baud rate lo
     4a6:	8f e5       	ldi	r24, 0x5F	; 95
     4a8:	80 93 d4 00 	sts	0x00D4, r24
	UBRR2H = 0x00; //set baud rate hi
     4ac:	10 92 d5 00 	sts	0x00D5, r1
	UCSR2B = 0x98;
     4b0:	88 e9       	ldi	r24, 0x98	; 152
     4b2:	80 83       	st	Z, r24
}
     4b4:	08 95       	ret

000004b6 <adc_init>:

//*******************************ADC Initialization Starts****************************
// Conversion time: 56uS
void adc_init(void)
{
	ADCSRA = 0x00;
     4b6:	ea e7       	ldi	r30, 0x7A	; 122
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     4bc:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     4c0:	80 e2       	ldi	r24, 0x20	; 32
     4c2:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     4c6:	80 e8       	ldi	r24, 0x80	; 128
     4c8:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     4ca:	86 e8       	ldi	r24, 0x86	; 134
     4cc:	80 83       	st	Z, r24
}
     4ce:	08 95       	ret

000004d0 <timer5_init>:
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     4d0:	e1 e2       	ldi	r30, 0x21	; 33
     4d2:	f1 e0       	ldi	r31, 0x01	; 1
     4d4:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     4d6:	8f ef       	ldi	r24, 0xFF	; 255
     4d8:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     4dc:	91 e0       	ldi	r25, 0x01	; 1
     4de:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     4e2:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     4e6:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     4ea:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     4ee:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     4f2:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     4f6:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     4fa:	89 ea       	ldi	r24, 0xA9	; 169
     4fc:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     500:	8b e0       	ldi	r24, 0x0B	; 11
     502:	80 83       	st	Z, r24
}
     504:	08 95       	ret

00000506 <timer1_init>:
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 52.25Hz 
void timer1_init(void)
{
 TCCR1B = 0x00; //stop
     506:	e1 e8       	ldi	r30, 0x81	; 129
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
     50c:	8c ef       	ldi	r24, 0xFC	; 252
     50e:	80 93 85 00 	sts	0x0085, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	80 93 84 00 	sts	0x0084, r24
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
     518:	93 e0       	ldi	r25, 0x03	; 3
     51a:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
     51e:	8f ef       	ldi	r24, 0xFF	; 255
     520:	80 93 88 00 	sts	0x0088, r24
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
     524:	90 93 8b 00 	sts	0x008B, r25
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
     528:	80 93 8a 00 	sts	0x008A, r24
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
     52c:	90 93 8d 00 	sts	0x008D, r25
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
     530:	80 93 8c 00 	sts	0x008C, r24
 ICR1H  = 0x03;	
     534:	90 93 87 00 	sts	0x0087, r25
 ICR1L  = 0xFF;
     538:	80 93 86 00 	sts	0x0086, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
     53c:	8b ea       	ldi	r24, 0xAB	; 171
     53e:	80 93 80 00 	sts	0x0080, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
     542:	10 92 82 00 	sts	0x0082, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
     546:	8c e0       	ldi	r24, 0x0C	; 12
     548:	80 83       	st	Z, r24
}
     54a:	08 95       	ret

0000054c <left_position_encoder_interrupt_init>:

//*******************************Interrupt for position encoder Initialization Starts****************************

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
	cli(); //Clears the global interrupt
     54c:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     54e:	ea e6       	ldi	r30, 0x6A	; 106
     550:	f0 e0       	ldi	r31, 0x00	; 0
     552:	80 81       	ld	r24, Z
     554:	82 60       	ori	r24, 0x02	; 2
     556:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     558:	ec 9a       	sbi	0x1d, 4	; 29
	sei();   // Enables the global interrupt
     55a:	78 94       	sei
}
     55c:	08 95       	ret

0000055e <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
	cli(); //Clears the global interrupt
     55e:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     560:	ea e6       	ldi	r30, 0x6A	; 106
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	80 81       	ld	r24, Z
     566:	88 60       	ori	r24, 0x08	; 8
     568:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     56a:	ed 9a       	sbi	0x1d, 5	; 29
	sei();   // Enables the global interrupt
     56c:	78 94       	sei
}
     56e:	08 95       	ret

00000570 <spi_init>:
//*******************************SPI Initialization Starts****************************
//SPI initialize
// clock rate: 921600hz
void spi_init(void)
{
	SPCR = 0x53; //setup SPI
     570:	83 e5       	ldi	r24, 0x53	; 83
     572:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0x00; //setup SPI
     574:	1d bc       	out	0x2d, r1	; 45
	SPDR = 0x00;
     576:	1e bc       	out	0x2e, r1	; 46
}
     578:	08 95       	ret

0000057a <__vector_6>:
//*******************************SPI Initialization Ends****************************

//ISR for right position encoder
ISR(INT5_vect)
{
     57a:	1f 92       	push	r1
     57c:	0f 92       	push	r0
     57e:	0f b6       	in	r0, 0x3f	; 63
     580:	0f 92       	push	r0
     582:	11 24       	eor	r1, r1
     584:	8f 93       	push	r24
     586:	9f 93       	push	r25
     588:	af 93       	push	r26
     58a:	bf 93       	push	r27
	ShaftCountRight++;  //increment right shaft position count
     58c:	80 91 02 02 	lds	r24, 0x0202
     590:	90 91 03 02 	lds	r25, 0x0203
     594:	a0 91 04 02 	lds	r26, 0x0204
     598:	b0 91 05 02 	lds	r27, 0x0205
     59c:	01 96       	adiw	r24, 0x01	; 1
     59e:	a1 1d       	adc	r26, r1
     5a0:	b1 1d       	adc	r27, r1
     5a2:	80 93 02 02 	sts	0x0202, r24
     5a6:	90 93 03 02 	sts	0x0203, r25
     5aa:	a0 93 04 02 	sts	0x0204, r26
     5ae:	b0 93 05 02 	sts	0x0205, r27
}
     5b2:	bf 91       	pop	r27
     5b4:	af 91       	pop	r26
     5b6:	9f 91       	pop	r25
     5b8:	8f 91       	pop	r24
     5ba:	0f 90       	pop	r0
     5bc:	0f be       	out	0x3f, r0	; 63
     5be:	0f 90       	pop	r0
     5c0:	1f 90       	pop	r1
     5c2:	18 95       	reti

000005c4 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
     5c4:	1f 92       	push	r1
     5c6:	0f 92       	push	r0
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	0f 92       	push	r0
     5cc:	11 24       	eor	r1, r1
     5ce:	8f 93       	push	r24
     5d0:	9f 93       	push	r25
     5d2:	af 93       	push	r26
     5d4:	bf 93       	push	r27
	ShaftCountLeft++;  //increment left shaft position count
     5d6:	80 91 06 02 	lds	r24, 0x0206
     5da:	90 91 07 02 	lds	r25, 0x0207
     5de:	a0 91 08 02 	lds	r26, 0x0208
     5e2:	b0 91 09 02 	lds	r27, 0x0209
     5e6:	01 96       	adiw	r24, 0x01	; 1
     5e8:	a1 1d       	adc	r26, r1
     5ea:	b1 1d       	adc	r27, r1
     5ec:	80 93 06 02 	sts	0x0206, r24
     5f0:	90 93 07 02 	sts	0x0207, r25
     5f4:	a0 93 08 02 	sts	0x0208, r26
     5f8:	b0 93 09 02 	sts	0x0209, r27
}
     5fc:	bf 91       	pop	r27
     5fe:	af 91       	pop	r26
     600:	9f 91       	pop	r25
     602:	8f 91       	pop	r24
     604:	0f 90       	pop	r0
     606:	0f be       	out	0x3f, r0	; 63
     608:	0f 90       	pop	r0
     60a:	1f 90       	pop	r1
     60c:	18 95       	reti

0000060e <init_devices>:

//Function To Initialize all The Devices
void init_devices()
{
	cli(); //Clears the global interrupts
     60e:	f8 94       	cli
	port_init();  //Initializes all the ports
     610:	0e 94 34 02 	call	0x468	; 0x468 <port_init>
	uart2_init(); //Initialize UART1 for serial communication
     614:	0e 94 4b 02 	call	0x496	; 0x496 <uart2_init>
	adc_init(); 
     618:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <adc_init>
	timer5_init();	// timer for PWM generation
     61c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <timer5_init>
	left_position_encoder_interrupt_init();
     620:	0e 94 a6 02 	call	0x54c	; 0x54c <left_position_encoder_interrupt_init>
	right_position_encoder_interrupt_init();
     624:	0e 94 af 02 	call	0x55e	; 0x55e <right_position_encoder_interrupt_init>
	timer1_init();	// timer for servo motors
     628:	0e 94 83 02 	call	0x506	; 0x506 <timer1_init>
	spi_init();
     62c:	0e 94 b8 02 	call	0x570	; 0x570 <spi_init>
	sei();   //Enables the global interrupts
     630:	78 94       	sei
} 
     632:	08 95       	ret

00000634 <ADC_Conversion>:
//-- ADC Conversion Function --------------
//-------------------------------------------------------------------------------
unsigned char ADC_Conversion(unsigned char ch)
{
	unsigned char a;
	if(ch>7)
     634:	88 30       	cpi	r24, 0x08	; 8
     636:	18 f0       	brcs	.+6      	; 0x63e <ADC_Conversion+0xa>
	{
		ADCSRB = 0x08;
     638:	98 e0       	ldi	r25, 0x08	; 8
     63a:	90 93 7b 00 	sts	0x007B, r25
	}
	ch = ch & 0x07;			  //Store only 3 LSB bits
     63e:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20 | ch;			  //Select the ADC channel with left adjust select
     640:	80 62       	ori	r24, 0x20	; 32
     642:	80 93 7c 00 	sts	0x007C, r24
	ADC_flag = 0x00; 			  //Clear the user defined flag
     646:	10 92 4e 02 	sts	0x024E, r1
	ADCSRA = ADCSRA | 0x40;	  //Set start conversion bit
     64a:	ea e7       	ldi	r30, 0x7A	; 122
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	80 81       	ld	r24, Z
     650:	80 64       	ori	r24, 0x40	; 64
     652:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0);	  //Wait for ADC conversion to complete
     654:	80 81       	ld	r24, Z
     656:	84 ff       	sbrs	r24, 4
     658:	fd cf       	rjmp	.-6      	; 0x654 <ADC_Conversion+0x20>
	a=ADCH;
     65a:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10;        //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     65e:	ea e7       	ldi	r30, 0x7A	; 122
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	90 81       	ld	r25, Z
     664:	90 61       	ori	r25, 0x10	; 16
     666:	90 83       	st	Z, r25
	ADCSRB = 0x00;
     668:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     66c:	08 95       	ret

0000066e <velocity>:

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     66e:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     672:	60 93 2a 01 	sts	0x012A, r22
}
     676:	08 95       	ret

00000678 <motor_enable>:

void motor_enable (void)
{
	PORTL |= 18;		// Enable left and right motor. Used with function where velocity is not used
     678:	eb e0       	ldi	r30, 0x0B	; 11
     67a:	f1 e0       	ldi	r31, 0x01	; 1
     67c:	80 81       	ld	r24, Z
     67e:	82 61       	ori	r24, 0x12	; 18
     680:	80 83       	st	Z, r24
}
     682:	08 95       	ret

00000684 <buzzer_on>:
void buzzer_on (void)
{
	PORTC |= 0x08;
     684:	43 9a       	sbi	0x08, 3	; 8
}
     686:	08 95       	ret

00000688 <buzzer_off>:

void buzzer_off (void)
{
	PORTC &= 0xF7;
     688:	43 98       	cbi	0x08, 3	; 8
}
     68a:	08 95       	ret

0000068c <forward>:

void forward (void)
{
	//PORTA &= 0xF0;
	PORTA = 0x06;
     68c:	86 e0       	ldi	r24, 0x06	; 6
     68e:	82 b9       	out	0x02, r24	; 2
}
     690:	08 95       	ret

00000692 <back>:

void back (void)
{
	//PORTA &= 0xF0;
	PORTA = 0x09;
     692:	89 e0       	ldi	r24, 0x09	; 9
     694:	82 b9       	out	0x02, r24	; 2
}
     696:	08 95       	ret

00000698 <left>:

void left (void)
{
	//PORTA &= 0xF0;
	PORTA = 0x05;
     698:	85 e0       	ldi	r24, 0x05	; 5
     69a:	82 b9       	out	0x02, r24	; 2
}
     69c:	08 95       	ret

0000069e <right>:

void right (void)
{
	//PORTA &= 0xF0;
	PORTA = 0x0A;
     69e:	8a e0       	ldi	r24, 0x0A	; 10
     6a0:	82 b9       	out	0x02, r24	; 2
}
     6a2:	08 95       	ret

000006a4 <stop>:

void stop (void)
{
	PORTA = 0x00;
     6a4:	12 b8       	out	0x02, r1	; 2
}
     6a6:	08 95       	ret

000006a8 <linear_distance_mm>:
void linear_distance_mm(unsigned int DistanceInMM)
{
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
     6a8:	bc 01       	movw	r22, r24
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	0e 94 8a 07 	call	0xf14	; 0xf14 <__floatunsisf>
     6b2:	25 ee       	ldi	r18, 0xE5	; 229
     6b4:	30 ed       	ldi	r19, 0xD0	; 208
     6b6:	4a ea       	ldi	r20, 0xAA	; 170
     6b8:	50 e4       	ldi	r21, 0x40	; 64
     6ba:	0e 94 f6 06 	call	0xdec	; 0xdec <__divsf3>
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     6be:	0e 94 5e 07 	call	0xebc	; 0xebc <__fixunssfsi>
     6c2:	46 2f       	mov	r20, r22
     6c4:	57 2f       	mov	r21, r23
     6c6:	68 2f       	mov	r22, r24
     6c8:	79 2f       	mov	r23, r25
	
	ShaftCountRight = 0;
     6ca:	10 92 02 02 	sts	0x0202, r1
     6ce:	10 92 03 02 	sts	0x0203, r1
     6d2:	10 92 04 02 	sts	0x0204, r1
     6d6:	10 92 05 02 	sts	0x0205, r1
	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
     6da:	80 91 02 02 	lds	r24, 0x0202
     6de:	90 91 03 02 	lds	r25, 0x0203
     6e2:	a0 91 04 02 	lds	r26, 0x0204
     6e6:	b0 91 05 02 	lds	r27, 0x0205
     6ea:	48 17       	cp	r20, r24
     6ec:	59 07       	cpc	r21, r25
     6ee:	6a 07       	cpc	r22, r26
     6f0:	7b 07       	cpc	r23, r27
     6f2:	98 f7       	brcc	.-26     	; 0x6da <linear_distance_mm+0x32>
		{
			break;
		}
	}
	stop(); //Stop robot
     6f4:	0e 94 52 03 	call	0x6a4	; 0x6a4 <stop>
}
     6f8:	08 95       	ret

000006fa <forward_mm>:

void forward_mm(unsigned int DistanceInMM)
{
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	ec 01       	movw	r28, r24
	forward();
     700:	0e 94 46 03 	call	0x68c	; 0x68c <forward>
	linear_distance_mm(DistanceInMM);
     704:	ce 01       	movw	r24, r28
     706:	0e 94 54 03 	call	0x6a8	; 0x6a8 <linear_distance_mm>
}
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	08 95       	ret

00000710 <back_mm>:

void back_mm(unsigned int DistanceInMM)
{
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	ec 01       	movw	r28, r24
	back();
     716:	0e 94 49 03 	call	0x692	; 0x692 <back>
	linear_distance_mm(DistanceInMM);
     71a:	ce 01       	movw	r24, r28
     71c:	0e 94 54 03 	call	0x6a8	; 0x6a8 <linear_distance_mm>
}
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	08 95       	ret

00000726 <servo_1>:
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	OCR1AH = 0x00;
     726:	10 92 89 00 	sts	0x0089, r1

//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
     72a:	68 2f       	mov	r22, r24
     72c:	70 e0       	ldi	r23, 0x00	; 0
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	0e 94 8a 07 	call	0xf14	; 0xf14 <__floatunsisf>
     736:	2b e7       	ldi	r18, 0x7B	; 123
     738:	34 e1       	ldi	r19, 0x14	; 20
     73a:	4e ee       	ldi	r20, 0xEE	; 238
     73c:	5f e3       	ldi	r21, 0x3F	; 63
     73e:	0e 94 f6 06 	call	0xdec	; 0xdec <__divsf3>
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	4c e0       	ldi	r20, 0x0C	; 12
     748:	52 e4       	ldi	r21, 0x42	; 66
     74a:	0e 94 92 06 	call	0xd24	; 0xd24 <__addsf3>
	OCR1AH = 0x00;
	OCR1AL = (unsigned char) PositionPanServo;
     74e:	0e 94 5e 07 	call	0xebc	; 0xebc <__fixunssfsi>
     752:	60 93 88 00 	sts	0x0088, r22
}
     756:	08 95       	ret

00000758 <servo_2>:
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	OCR1BH = 0x00;
     758:	10 92 8b 00 	sts	0x008B, r1

//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
     75c:	68 2f       	mov	r22, r24
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	0e 94 8a 07 	call	0xf14	; 0xf14 <__floatunsisf>
     768:	2b e7       	ldi	r18, 0x7B	; 123
     76a:	34 e1       	ldi	r19, 0x14	; 20
     76c:	4e ee       	ldi	r20, 0xEE	; 238
     76e:	5f e3       	ldi	r21, 0x3F	; 63
     770:	0e 94 f6 06 	call	0xdec	; 0xdec <__divsf3>
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	4c e0       	ldi	r20, 0x0C	; 12
     77a:	52 e4       	ldi	r21, 0x42	; 66
     77c:	0e 94 92 06 	call	0xd24	; 0xd24 <__addsf3>
	OCR1BH = 0x00;
	OCR1BL = (unsigned char) PositionTiltServo;
     780:	0e 94 5e 07 	call	0xebc	; 0xebc <__fixunssfsi>
     784:	60 93 8a 00 	sts	0x008A, r22
}
     788:	08 95       	ret

0000078a <servo_3>:
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
	float PositionServo = 0;
	PositionServo = ((float)degrees / 1.86) + 35.0;
	OCR1CH = 0x00;
     78a:	10 92 8d 00 	sts	0x008D, r1

//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
	float PositionServo = 0;
	PositionServo = ((float)degrees / 1.86) + 35.0;
     78e:	68 2f       	mov	r22, r24
     790:	70 e0       	ldi	r23, 0x00	; 0
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	0e 94 8a 07 	call	0xf14	; 0xf14 <__floatunsisf>
     79a:	2b e7       	ldi	r18, 0x7B	; 123
     79c:	34 e1       	ldi	r19, 0x14	; 20
     79e:	4e ee       	ldi	r20, 0xEE	; 238
     7a0:	5f e3       	ldi	r21, 0x3F	; 63
     7a2:	0e 94 f6 06 	call	0xdec	; 0xdec <__divsf3>
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	4c e0       	ldi	r20, 0x0C	; 12
     7ac:	52 e4       	ldi	r21, 0x42	; 66
     7ae:	0e 94 92 06 	call	0xd24	; 0xd24 <__addsf3>
	OCR1CH = 0x00;
	OCR1CL = (unsigned char) PositionServo;
     7b2:	0e 94 5e 07 	call	0xebc	; 0xebc <__fixunssfsi>
     7b6:	60 93 8c 00 	sts	0x008C, r22
}
     7ba:	08 95       	ret

000007bc <servo_1_free>:
//and make them free by giving 100% duty cycle at the PWM. This function can be used to
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
	OCR1AH = 0x03;
     7bc:	83 e0       	ldi	r24, 0x03	; 3
     7be:	80 93 89 00 	sts	0x0089, r24
	OCR1AL = 0xFF; //Servo 1 off
     7c2:	8f ef       	ldi	r24, 0xFF	; 255
     7c4:	80 93 88 00 	sts	0x0088, r24
}
     7c8:	08 95       	ret

000007ca <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
	OCR1BH = 0x03;
     7ca:	83 e0       	ldi	r24, 0x03	; 3
     7cc:	80 93 8b 00 	sts	0x008B, r24
	OCR1BL = 0xFF; //Servo 2 off
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	80 93 8a 00 	sts	0x008A, r24
}
     7d6:	08 95       	ret

000007d8 <servo_3_free>:

void servo_3_free (void) //makes servo 3 free rotating
{
	OCR1CH = 0x03;
     7d8:	83 e0       	ldi	r24, 0x03	; 3
     7da:	80 93 8d 00 	sts	0x008D, r24
	OCR1CL = 0xFF; //Servo 3 off
     7de:	8f ef       	ldi	r24, 0xFF	; 255
     7e0:	80 93 8c 00 	sts	0x008C, r24
}
     7e4:	08 95       	ret

000007e6 <LED_bargraph_on>:

void LED_bargraph_on (unsigned char data)
{
	PORTJ |= data;
     7e6:	e5 e0       	ldi	r30, 0x05	; 5
     7e8:	f1 e0       	ldi	r31, 0x01	; 1
     7ea:	90 81       	ld	r25, Z
     7ec:	89 2b       	or	r24, r25
     7ee:	80 83       	st	Z, r24
}
     7f0:	08 95       	ret

000007f2 <LED_bargraph_off>:

void LED_bargraph_off (unsigned char data)
{
	PORTJ &= data;
     7f2:	e5 e0       	ldi	r30, 0x05	; 5
     7f4:	f1 e0       	ldi	r31, 0x01	; 1
     7f6:	90 81       	ld	r25, Z
     7f8:	89 23       	and	r24, r25
     7fa:	80 83       	st	Z, r24
}
     7fc:	08 95       	ret

000007fe <spi_master_tx_and_rx>:
//-------------------------------------------------------------------------------
unsigned char spi_master_tx_and_rx (unsigned char data)
{
	unsigned char rx_data = 0;

	PORTB = PORTB & 0xFE;        // make SS pin low
     7fe:	28 98       	cbi	0x05, 0	; 5
	SPDR = data;
     800:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));  //wait for data transmission to complete
     802:	0d b4       	in	r0, 0x2d	; 45
     804:	07 fe       	sbrs	r0, 7
     806:	fd cf       	rjmp	.-6      	; 0x802 <spi_master_tx_and_rx+0x4>
     808:	86 e6       	ldi	r24, 0x66	; 102
     80a:	9e e0       	ldi	r25, 0x0E	; 14
     80c:	01 97       	sbiw	r24, 0x01	; 1
     80e:	f1 f7       	brne	.-4      	; 0x80c <spi_master_tx_and_rx+0xe>
     810:	00 00       	nop

	_delay_ms(1);                //time for ADC conversion in the slave microcontroller
	
	SPDR = 0x50;                 // send dummy byte to read back data from the slave microcontroller
     812:	80 e5       	ldi	r24, 0x50	; 80
     814:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));  //wait for data reception to complete
     816:	0d b4       	in	r0, 0x2d	; 45
     818:	07 fe       	sbrs	r0, 7
     81a:	fd cf       	rjmp	.-6      	; 0x816 <spi_master_tx_and_rx+0x18>
	rx_data = SPDR;
     81c:	8e b5       	in	r24, 0x2e	; 46
	PORTB = PORTB | 0x01;        // make SS high
     81e:	28 9a       	sbi	0x05, 0	; 5
	return rx_data;
}
     820:	08 95       	ret

00000822 <__vector_51>:



//SIGNAL(SIG_USART2_RECV) 		// ISR for receive complete interrupt
ISR(USART2_RX_vect)
{
     822:	1f 92       	push	r1
     824:	0f 92       	push	r0
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	0f 92       	push	r0
     82a:	0b b6       	in	r0, 0x3b	; 59
     82c:	0f 92       	push	r0
     82e:	11 24       	eor	r1, r1
     830:	2f 93       	push	r18
     832:	3f 93       	push	r19
     834:	8f 93       	push	r24
     836:	9f 93       	push	r25
     838:	af 93       	push	r26
     83a:	bf 93       	push	r27
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	ef 93       	push	r30
     842:	ff 93       	push	r31
	rec_data = UDR2; 				//making copy of data from UDR2 in 'data' variable
     844:	90 91 d6 00 	lds	r25, 0x00D6
     848:	90 93 4b 02 	sts	0x024B, r25

	while(!(UCSR2A && (1<<RXC2)));	// wait till data byte is received
     84c:	e0 ed       	ldi	r30, 0xD0	; 208
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	80 81       	ld	r24, Z
     852:	88 23       	and	r24, r24
     854:	e9 f3       	breq	.-6      	; 0x850 <__vector_51+0x2e>
	
	if (data_packet_received == 0) 
     856:	80 91 15 02 	lds	r24, 0x0215
     85a:	88 23       	and	r24, r24
     85c:	09 f0       	breq	.+2      	; 0x860 <__vector_51+0x3e>
     85e:	4a c0       	rjmp	.+148    	; 0x8f4 <__vector_51+0xd2>
	{
		if (rec_data == '\n' )			// '\n' decimal value is 10
     860:	9a 30       	cpi	r25, 0x0A	; 10
     862:	71 f4       	brne	.+28     	; 0x880 <__vector_51+0x5e>
		{
			 //state = _second_last_byte 
			uart_data_buff[i] = rec_data;
     864:	80 91 17 02 	lds	r24, 0x0217
     868:	e2 e3       	ldi	r30, 0x32	; 50
     86a:	f2 e0       	ldi	r31, 0x02	; 2
     86c:	e8 0f       	add	r30, r24
     86e:	f1 1d       	adc	r31, r1
     870:	90 83       	st	Z, r25
			i++;
     872:	8f 5f       	subi	r24, 0xFF	; 255
     874:	80 93 17 02 	sts	0x0217, r24
			end_char_rec = 1;
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	80 93 18 02 	sts	0x0218, r24
     87e:	3a c0       	rjmp	.+116    	; 0x8f4 <__vector_51+0xd2>
		//	UDR2 = rec_data;
		}

		else 
		{
			if((end_char_rec == 1) && (rec_data == '\r'))		//'\r' indicates end of transmission. It should come after '\n'
     880:	80 91 18 02 	lds	r24, 0x0218
     884:	81 30       	cpi	r24, 0x01	; 1
     886:	61 f5       	brne	.+88     	; 0x8e0 <__vector_51+0xbe>
     888:	9d 30       	cpi	r25, 0x0D	; 13
     88a:	a1 f5       	brne	.+104    	; 0x8f4 <__vector_51+0xd2>
			{
				uart_data_buff[i] = rec_data;
     88c:	20 91 17 02 	lds	r18, 0x0217
     890:	e2 e3       	ldi	r30, 0x32	; 50
     892:	f2 e0       	ldi	r31, 0x02	; 2
     894:	e2 0f       	add	r30, r18
     896:	f1 1d       	adc	r31, r1
     898:	8d e0       	ldi	r24, 0x0D	; 13
     89a:	80 83       	st	Z, r24
				i++;
     89c:	32 2f       	mov	r19, r18
     89e:	3f 5f       	subi	r19, 0xFF	; 255
     8a0:	30 93 17 02 	sts	0x0217, r19
				end_char_rec = 2;
     8a4:	82 e0       	ldi	r24, 0x02	; 2
     8a6:	80 93 18 02 	sts	0x0218, r24
				data_packet_received = 1;
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	80 93 15 02 	sts	0x0215, r24
				
				for (j = 0;j<i;j++)				// i value is stored in ISR
     8b0:	10 92 16 02 	sts	0x0216, r1
     8b4:	33 23       	and	r19, r19
     8b6:	f1 f0       	breq	.+60     	; 0x8f4 <__vector_51+0xd2>
     8b8:	e9 e1       	ldi	r30, 0x19	; 25
     8ba:	f2 e0       	ldi	r31, 0x02	; 2
     8bc:	ca e6       	ldi	r28, 0x6A	; 106
     8be:	d2 e0       	ldi	r29, 0x02	; 2
     8c0:	a2 e3       	ldi	r26, 0x32	; 50
     8c2:	b2 e0       	ldi	r27, 0x02	; 2
}



//SIGNAL(SIG_USART2_RECV) 		// ISR for receive complete interrupt
ISR(USART2_RX_vect)
     8c4:	cf 01       	movw	r24, r30
     8c6:	01 96       	adiw	r24, 0x01	; 1
     8c8:	82 0f       	add	r24, r18
     8ca:	91 1d       	adc	r25, r1
				end_char_rec = 2;
				data_packet_received = 1;
				
				for (j = 0;j<i;j++)				// i value is stored in ISR
				{
					copy_packet_data[j] = uart_data_buff[j];
     8cc:	2c 91       	ld	r18, X
     8ce:	21 93       	st	Z+, r18
					lcd_disp[j] = uart_data_buff[j];
     8d0:	29 93       	st	Y+, r18
					//UDR2 = copy_packet_data[j];
					uart_data_buff[j] = 0;
     8d2:	1d 92       	st	X+, r1
				uart_data_buff[i] = rec_data;
				i++;
				end_char_rec = 2;
				data_packet_received = 1;
				
				for (j = 0;j<i;j++)				// i value is stored in ISR
     8d4:	e8 17       	cp	r30, r24
     8d6:	f9 07       	cpc	r31, r25
     8d8:	c9 f7       	brne	.-14     	; 0x8cc <__vector_51+0xaa>
     8da:	30 93 16 02 	sts	0x0216, r19
     8de:	0a c0       	rjmp	.+20     	; 0x8f4 <__vector_51+0xd2>
																	// discard the data and check 
			}
		
			else													// store other data bytes
			{
				uart_data_buff[i] = rec_data;
     8e0:	80 91 17 02 	lds	r24, 0x0217
     8e4:	e2 e3       	ldi	r30, 0x32	; 50
     8e6:	f2 e0       	ldi	r31, 0x02	; 2
     8e8:	e8 0f       	add	r30, r24
     8ea:	f1 1d       	adc	r31, r1
     8ec:	90 83       	st	Z, r25
				i++;
     8ee:	8f 5f       	subi	r24, 0xFF	; 255
     8f0:	80 93 17 02 	sts	0x0217, r24
			//	UDR2 = rec_data;
			}
		}
	}	
}	// end of ISR
     8f4:	ff 91       	pop	r31
     8f6:	ef 91       	pop	r30
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	bf 91       	pop	r27
     8fe:	af 91       	pop	r26
     900:	9f 91       	pop	r25
     902:	8f 91       	pop	r24
     904:	3f 91       	pop	r19
     906:	2f 91       	pop	r18
     908:	0f 90       	pop	r0
     90a:	0b be       	out	0x3b, r0	; 59
     90c:	0f 90       	pop	r0
     90e:	0f be       	out	0x3f, r0	; 63
     910:	0f 90       	pop	r0
     912:	1f 90       	pop	r1
     914:	18 95       	reti

00000916 <send_sensor_data>:

void send_sensor_data(void)
{
	if (device_id == 0x00)
     916:	80 91 13 02 	lds	r24, 0x0213
     91a:	88 23       	and	r24, r24
     91c:	09 f0       	breq	.+2      	; 0x920 <send_sensor_data+0xa>
     91e:	6a c0       	rjmp	.+212    	; 0x9f4 <send_sensor_data+0xde>
	{
		if (function_type == 0x00)
     920:	80 91 11 02 	lds	r24, 0x0211
     924:	88 23       	and	r24, r24
     926:	29 f4       	brne	.+10     	; 0x932 <send_sensor_data+0x1c>
		{
			UDR2 = ADC_Conversion(0);		// Battery Voltage
     928:	0e 94 1a 03 	call	0x634	; 0x634 <ADC_Conversion>
     92c:	80 93 d6 00 	sts	0x00D6, r24
     930:	61 c0       	rjmp	.+194    	; 0x9f4 <send_sensor_data+0xde>
		}
		
		else if (function_type == 0x01)
     932:	81 30       	cpi	r24, 0x01	; 1
     934:	29 f4       	brne	.+10     	; 0x940 <send_sensor_data+0x2a>
		{
			UDR2 = ADC_Conversion(1);		// right WL sensor
     936:	0e 94 1a 03 	call	0x634	; 0x634 <ADC_Conversion>
     93a:	80 93 d6 00 	sts	0x00D6, r24
     93e:	5a c0       	rjmp	.+180    	; 0x9f4 <send_sensor_data+0xde>
		}
		
		else if (function_type == 0x02)
     940:	82 30       	cpi	r24, 0x02	; 2
     942:	29 f4       	brne	.+10     	; 0x94e <send_sensor_data+0x38>
		{
			UDR2 = ADC_Conversion(2);		// Center WL sensor
     944:	0e 94 1a 03 	call	0x634	; 0x634 <ADC_Conversion>
     948:	80 93 d6 00 	sts	0x00D6, r24
     94c:	53 c0       	rjmp	.+166    	; 0x9f4 <send_sensor_data+0xde>
		}
		
		else if (function_type == 0x03)
     94e:	83 30       	cpi	r24, 0x03	; 3
     950:	29 f4       	brne	.+10     	; 0x95c <send_sensor_data+0x46>
		{
			UDR2 = ADC_Conversion(3);		// left WL sensor
     952:	0e 94 1a 03 	call	0x634	; 0x634 <ADC_Conversion>
     956:	80 93 d6 00 	sts	0x00D6, r24
     95a:	4c c0       	rjmp	.+152    	; 0x9f4 <send_sensor_data+0xde>
		}
		
		else if (function_type == 0x04)
     95c:	84 30       	cpi	r24, 0x04	; 4
     95e:	29 f4       	brne	.+10     	; 0x96a <send_sensor_data+0x54>
		{
			UDR2 = ADC_Conversion(4);		// IR Proximity sensor-1
     960:	0e 94 1a 03 	call	0x634	; 0x634 <ADC_Conversion>
     964:	80 93 d6 00 	sts	0x00D6, r24
     968:	45 c0       	rjmp	.+138    	; 0x9f4 <send_sensor_data+0xde>
		}
		
		else if (function_type == 0x05)
     96a:	85 30       	cpi	r24, 0x05	; 5
     96c:	29 f4       	brne	.+10     	; 0x978 <send_sensor_data+0x62>
		{
			UDR2 = ADC_Conversion(5);		// IR Proximity sensor-2
     96e:	0e 94 1a 03 	call	0x634	; 0x634 <ADC_Conversion>
     972:	80 93 d6 00 	sts	0x00D6, r24
     976:	3e c0       	rjmp	.+124    	; 0x9f4 <send_sensor_data+0xde>
		}
		
		else if (function_type == 0x06)
     978:	86 30       	cpi	r24, 0x06	; 6
     97a:	29 f4       	brne	.+10     	; 0x986 <send_sensor_data+0x70>
		{
			UDR2 = ADC_Conversion(6);		// IR Proximity sensor-3
     97c:	0e 94 1a 03 	call	0x634	; 0x634 <ADC_Conversion>
     980:	80 93 d6 00 	sts	0x00D6, r24
     984:	37 c0       	rjmp	.+110    	; 0x9f4 <send_sensor_data+0xde>
		}
		
		else if (function_type == 0x07)
     986:	87 30       	cpi	r24, 0x07	; 7
     988:	29 f4       	brne	.+10     	; 0x994 <send_sensor_data+0x7e>
		{
			UDR2 = ADC_Conversion(7);		// IR Proximity sensor-4
     98a:	0e 94 1a 03 	call	0x634	; 0x634 <ADC_Conversion>
     98e:	80 93 d6 00 	sts	0x00D6, r24
     992:	30 c0       	rjmp	.+96     	; 0x9f4 <send_sensor_data+0xde>
		}
		
		else if (function_type == 0x08)
     994:	88 30       	cpi	r24, 0x08	; 8
     996:	29 f4       	brne	.+10     	; 0x9a2 <send_sensor_data+0x8c>
		{
			UDR2 = ADC_Conversion(8);		// IR Proximity sensor-5
     998:	0e 94 1a 03 	call	0x634	; 0x634 <ADC_Conversion>
     99c:	80 93 d6 00 	sts	0x00D6, r24
     9a0:	29 c0       	rjmp	.+82     	; 0x9f4 <send_sensor_data+0xde>
		}
		
		else if (function_type == 0x09)
     9a2:	89 30       	cpi	r24, 0x09	; 9
     9a4:	29 f4       	brne	.+10     	; 0x9b0 <send_sensor_data+0x9a>
		{
			UDR2 = ADC_Conversion(9);		// Sharp Sensor-1
     9a6:	0e 94 1a 03 	call	0x634	; 0x634 <ADC_Conversion>
     9aa:	80 93 d6 00 	sts	0x00D6, r24
     9ae:	22 c0       	rjmp	.+68     	; 0x9f4 <send_sensor_data+0xde>
		}

		else if (function_type == 0x0A)
     9b0:	8a 30       	cpi	r24, 0x0A	; 10
     9b2:	29 f4       	brne	.+10     	; 0x9be <send_sensor_data+0xa8>
		{
			UDR2 = ADC_Conversion(10);		// Sharp Sensor-2
     9b4:	0e 94 1a 03 	call	0x634	; 0x634 <ADC_Conversion>
     9b8:	80 93 d6 00 	sts	0x00D6, r24
     9bc:	1b c0       	rjmp	.+54     	; 0x9f4 <send_sensor_data+0xde>
		}

		else if (function_type == 0x0B)
     9be:	8b 30       	cpi	r24, 0x0B	; 11
     9c0:	29 f4       	brne	.+10     	; 0x9cc <send_sensor_data+0xb6>
		{
			UDR2 = ADC_Conversion(11);		// Sharp Sensor-3
     9c2:	0e 94 1a 03 	call	0x634	; 0x634 <ADC_Conversion>
     9c6:	80 93 d6 00 	sts	0x00D6, r24
     9ca:	14 c0       	rjmp	.+40     	; 0x9f4 <send_sensor_data+0xde>
		}

		else if (function_type == 0x0C)
     9cc:	8c 30       	cpi	r24, 0x0C	; 12
     9ce:	29 f4       	brne	.+10     	; 0x9da <send_sensor_data+0xc4>
		{
			UDR2 = ADC_Conversion(12);		// Sharp Sensor-4
     9d0:	0e 94 1a 03 	call	0x634	; 0x634 <ADC_Conversion>
     9d4:	80 93 d6 00 	sts	0x00D6, r24
     9d8:	0d c0       	rjmp	.+26     	; 0x9f4 <send_sensor_data+0xde>
		}

		else if (function_type == 0x0D)
     9da:	8d 30       	cpi	r24, 0x0D	; 13
     9dc:	29 f4       	brne	.+10     	; 0x9e8 <send_sensor_data+0xd2>
		{
			UDR2 = ADC_Conversion(13);		// Sharp Sensor-5
     9de:	0e 94 1a 03 	call	0x634	; 0x634 <ADC_Conversion>
     9e2:	80 93 d6 00 	sts	0x00D6, r24
     9e6:	06 c0       	rjmp	.+12     	; 0x9f4 <send_sensor_data+0xde>
		}

		else if (function_type == 0x0E)
     9e8:	8e 30       	cpi	r24, 0x0E	; 14
     9ea:	21 f4       	brne	.+8      	; 0x9f4 <send_sensor_data+0xde>
		{
			UDR2 = ADC_Conversion(14);		// Connected to servo pod
     9ec:	0e 94 1a 03 	call	0x634	; 0x634 <ADC_Conversion>
     9f0:	80 93 d6 00 	sts	0x00D6, r24
		{
			UDR2 = ADC_Conversion(15);		// Connected to servo pod
		}
	}
	
	if (device_id == 0x01)				// ATmega 8 ADC
     9f4:	80 91 13 02 	lds	r24, 0x0213
     9f8:	81 30       	cpi	r24, 0x01	; 1
     9fa:	c9 f5       	brne	.+114    	; 0xa6e <send_sensor_data+0x158>
	{
		if (function_type == 0x00)					// Whiteline sensor 4
     9fc:	80 91 11 02 	lds	r24, 0x0211
     a00:	88 23       	and	r24, r24
     a02:	29 f4       	brne	.+10     	; 0xa0e <send_sensor_data+0xf8>
		{
			UDR2 = spi_master_tx_and_rx(0);
     a04:	0e 94 ff 03 	call	0x7fe	; 0x7fe <spi_master_tx_and_rx>
     a08:	80 93 d6 00 	sts	0x00D6, r24
     a0c:	08 95       	ret
		} 
		
		else if (function_type == 0x01)				// Whiteline sensor 5
     a0e:	81 30       	cpi	r24, 0x01	; 1
     a10:	29 f4       	brne	.+10     	; 0xa1c <send_sensor_data+0x106>
		{
			UDR2 = spi_master_tx_and_rx(1);
     a12:	0e 94 ff 03 	call	0x7fe	; 0x7fe <spi_master_tx_and_rx>
     a16:	80 93 d6 00 	sts	0x00D6, r24
     a1a:	08 95       	ret
		}
		
		else if (function_type == 0x02)				// Whiteline sensor 6
     a1c:	82 30       	cpi	r24, 0x02	; 2
     a1e:	29 f4       	brne	.+10     	; 0xa2a <send_sensor_data+0x114>
		{
			UDR2 = spi_master_tx_and_rx(2);
     a20:	0e 94 ff 03 	call	0x7fe	; 0x7fe <spi_master_tx_and_rx>
     a24:	80 93 d6 00 	sts	0x00D6, r24
     a28:	08 95       	ret
		}
		
		else if (function_type == 0x03)				// Whiteline sensor 7
     a2a:	83 30       	cpi	r24, 0x03	; 3
     a2c:	29 f4       	brne	.+10     	; 0xa38 <send_sensor_data+0x122>
		{
			UDR2 = spi_master_tx_and_rx(3);
     a2e:	0e 94 ff 03 	call	0x7fe	; 0x7fe <spi_master_tx_and_rx>
     a32:	80 93 d6 00 	sts	0x00D6, r24
     a36:	08 95       	ret
		}
		
		else if (function_type == 0x04)				// Current Sensor
     a38:	84 30       	cpi	r24, 0x04	; 4
     a3a:	29 f4       	brne	.+10     	; 0xa46 <send_sensor_data+0x130>
		{
			UDR2 = spi_master_tx_and_rx(4);
     a3c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <spi_master_tx_and_rx>
     a40:	80 93 d6 00 	sts	0x00D6, r24
     a44:	08 95       	ret
		}
		
		else if (function_type == 0x05)				// IR proximity sensor 6
     a46:	85 30       	cpi	r24, 0x05	; 5
     a48:	29 f4       	brne	.+10     	; 0xa54 <send_sensor_data+0x13e>
		{
			UDR2 = spi_master_tx_and_rx(5);
     a4a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <spi_master_tx_and_rx>
     a4e:	80 93 d6 00 	sts	0x00D6, r24
     a52:	08 95       	ret
		}
		
		else if (function_type == 0x06)				// IR proximity sensor 7
     a54:	86 30       	cpi	r24, 0x06	; 6
     a56:	29 f4       	brne	.+10     	; 0xa62 <send_sensor_data+0x14c>
		{
			UDR2 = spi_master_tx_and_rx(6);
     a58:	0e 94 ff 03 	call	0x7fe	; 0x7fe <spi_master_tx_and_rx>
     a5c:	80 93 d6 00 	sts	0x00D6, r24
     a60:	08 95       	ret
		}
		
		else if (function_type == 0x07)				// IR proximity sensor 8
     a62:	87 30       	cpi	r24, 0x07	; 7
     a64:	21 f4       	brne	.+8      	; 0xa6e <send_sensor_data+0x158>
		{
			UDR2 = spi_master_tx_and_rx(7);
     a66:	0e 94 ff 03 	call	0x7fe	; 0x7fe <spi_master_tx_and_rx>
     a6a:	80 93 d6 00 	sts	0x00D6, r24
     a6e:	08 95       	ret

00000a70 <actuate_devices>:
	}
				
}

void actuate_devices(void)
{
     a70:	0f 93       	push	r16
     a72:	1f 93       	push	r17
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
	if (device_id == 0x01)				// Buzzer has device id = 1
     a78:	80 91 13 02 	lds	r24, 0x0213
     a7c:	81 30       	cpi	r24, 0x01	; 1
     a7e:	59 f4       	brne	.+22     	; 0xa96 <actuate_devices+0x26>
	{
		if (function_type == 0x00)
     a80:	80 91 11 02 	lds	r24, 0x0211
     a84:	88 23       	and	r24, r24
     a86:	19 f4       	brne	.+6      	; 0xa8e <actuate_devices+0x1e>
		{
			buzzer_on();
     a88:	0e 94 42 03 	call	0x684	; 0x684 <buzzer_on>
     a8c:	04 c0       	rjmp	.+8      	; 0xa96 <actuate_devices+0x26>
		}
		else if (function_type == 0x01)
     a8e:	81 30       	cpi	r24, 0x01	; 1
     a90:	11 f4       	brne	.+4      	; 0xa96 <actuate_devices+0x26>
		{
			buzzer_off();
     a92:	0e 94 44 03 	call	0x688	; 0x688 <buzzer_off>
		}
	}
	
	if (device_id == 0x02)				// Motor has device id = 2
     a96:	80 91 13 02 	lds	r24, 0x0213
     a9a:	82 30       	cpi	r24, 0x02	; 2
     a9c:	79 f5       	brne	.+94     	; 0xafc <actuate_devices+0x8c>
	{
		if (function_type == 0x00)
     a9e:	80 91 11 02 	lds	r24, 0x0211
     aa2:	88 23       	and	r24, r24
     aa4:	29 f4       	brne	.+10     	; 0xab0 <actuate_devices+0x40>
		{
			motor_enable();
     aa6:	0e 94 3c 03 	call	0x678	; 0x678 <motor_enable>
			forward();
     aaa:	0e 94 46 03 	call	0x68c	; 0x68c <forward>
     aae:	26 c0       	rjmp	.+76     	; 0xafc <actuate_devices+0x8c>
		}
		else if (function_type == 0x01)
     ab0:	81 30       	cpi	r24, 0x01	; 1
     ab2:	29 f4       	brne	.+10     	; 0xabe <actuate_devices+0x4e>
		{
			motor_enable();
     ab4:	0e 94 3c 03 	call	0x678	; 0x678 <motor_enable>
			back();
     ab8:	0e 94 49 03 	call	0x692	; 0x692 <back>
     abc:	1f c0       	rjmp	.+62     	; 0xafc <actuate_devices+0x8c>
		}
		else if (function_type == 0x02)
     abe:	82 30       	cpi	r24, 0x02	; 2
     ac0:	29 f4       	brne	.+10     	; 0xacc <actuate_devices+0x5c>
		{
			motor_enable();
     ac2:	0e 94 3c 03 	call	0x678	; 0x678 <motor_enable>
			right();
     ac6:	0e 94 4f 03 	call	0x69e	; 0x69e <right>
     aca:	18 c0       	rjmp	.+48     	; 0xafc <actuate_devices+0x8c>
		}
		else if (function_type == 0x03)
     acc:	83 30       	cpi	r24, 0x03	; 3
     ace:	29 f4       	brne	.+10     	; 0xada <actuate_devices+0x6a>
		{
			motor_enable();
     ad0:	0e 94 3c 03 	call	0x678	; 0x678 <motor_enable>
			left();
     ad4:	0e 94 4c 03 	call	0x698	; 0x698 <left>
     ad8:	11 c0       	rjmp	.+34     	; 0xafc <actuate_devices+0x8c>
		}
		else if (function_type == 0x04)
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	29 f4       	brne	.+10     	; 0xae8 <actuate_devices+0x78>
		{
			motor_enable();
     ade:	0e 94 3c 03 	call	0x678	; 0x678 <motor_enable>
			stop();
     ae2:	0e 94 52 03 	call	0x6a4	; 0x6a4 <stop>
     ae6:	0a c0       	rjmp	.+20     	; 0xafc <actuate_devices+0x8c>
		}
		else if (function_type == 0x09)
     ae8:	89 30       	cpi	r24, 0x09	; 9
     aea:	41 f4       	brne	.+16     	; 0xafc <actuate_devices+0x8c>
		{
			forward();
     aec:	0e 94 46 03 	call	0x68c	; 0x68c <forward>
			//UDR2 = param_1;
			velocity(param_string[0],param_string[1]);
     af0:	80 91 5a 02 	lds	r24, 0x025A
     af4:	60 91 5b 02 	lds	r22, 0x025B
     af8:	0e 94 37 03 	call	0x66e	; 0x66e <velocity>
			
		}	
	}

	if (device_id == 0x03)				// position encoder has device id = 3
     afc:	80 91 13 02 	lds	r24, 0x0213
     b00:	83 30       	cpi	r24, 0x03	; 3
     b02:	91 f4       	brne	.+36     	; 0xb28 <actuate_devices+0xb8>
	{
		if (function_type == 0x00)
     b04:	80 91 11 02 	lds	r24, 0x0211
     b08:	88 23       	and	r24, r24
     b0a:	29 f4       	brne	.+10     	; 0xb16 <actuate_devices+0xa6>
		{
			forward_mm(param_string[0]);
     b0c:	80 91 5a 02 	lds	r24, 0x025A
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 7d 03 	call	0x6fa	; 0x6fa <forward_mm>
		}
		
		if (function_type == 0x01 )
     b16:	80 91 11 02 	lds	r24, 0x0211
     b1a:	81 30       	cpi	r24, 0x01	; 1
     b1c:	29 f4       	brne	.+10     	; 0xb28 <actuate_devices+0xb8>
		{
			back_mm(param_string[0]);
     b1e:	80 91 5a 02 	lds	r24, 0x025A
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	0e 94 88 03 	call	0x710	; 0x710 <back_mm>
		}
	}

	if (device_id == 0x04)				// servo has device id = 4
     b28:	80 91 13 02 	lds	r24, 0x0213
     b2c:	84 30       	cpi	r24, 0x04	; 4
     b2e:	51 f5       	brne	.+84     	; 0xb84 <actuate_devices+0x114>
	{
		if (function_type == 0x00)
     b30:	80 91 11 02 	lds	r24, 0x0211
     b34:	88 23       	and	r24, r24
     b36:	21 f4       	brne	.+8      	; 0xb40 <actuate_devices+0xd0>
		{
			servo_1(param_string[0]);
     b38:	80 91 5a 02 	lds	r24, 0x025A
     b3c:	0e 94 93 03 	call	0x726	; 0x726 <servo_1>
		}
		
		if (function_type == 0x01 )
     b40:	80 91 11 02 	lds	r24, 0x0211
     b44:	81 30       	cpi	r24, 0x01	; 1
     b46:	21 f4       	brne	.+8      	; 0xb50 <actuate_devices+0xe0>
		{
			servo_2(param_string[0]);
     b48:	80 91 5a 02 	lds	r24, 0x025A
     b4c:	0e 94 ac 03 	call	0x758	; 0x758 <servo_2>
		}
		
		if (function_type == 0x02 )
     b50:	80 91 11 02 	lds	r24, 0x0211
     b54:	82 30       	cpi	r24, 0x02	; 2
     b56:	21 f4       	brne	.+8      	; 0xb60 <actuate_devices+0xf0>
		{
			servo_3(param_string[0]);
     b58:	80 91 5a 02 	lds	r24, 0x025A
     b5c:	0e 94 c5 03 	call	0x78a	; 0x78a <servo_3>
		}

		if (function_type == 0x03 )
     b60:	80 91 11 02 	lds	r24, 0x0211
     b64:	83 30       	cpi	r24, 0x03	; 3
     b66:	11 f4       	brne	.+4      	; 0xb6c <actuate_devices+0xfc>
		{
			servo_1_free();
     b68:	0e 94 de 03 	call	0x7bc	; 0x7bc <servo_1_free>
		}

		if (function_type == 0x04 )
     b6c:	80 91 11 02 	lds	r24, 0x0211
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	11 f4       	brne	.+4      	; 0xb78 <actuate_devices+0x108>
		{
			servo_2_free();
     b74:	0e 94 e5 03 	call	0x7ca	; 0x7ca <servo_2_free>
		}

		if (function_type == 0x05 )
     b78:	80 91 11 02 	lds	r24, 0x0211
     b7c:	85 30       	cpi	r24, 0x05	; 5
     b7e:	11 f4       	brne	.+4      	; 0xb84 <actuate_devices+0x114>
		{
			servo_3_free();
     b80:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <servo_3_free>
		}
	}
	if (device_id == 0x05)    // Led bargraph has device id = 5
     b84:	80 91 13 02 	lds	r24, 0x0213
     b88:	85 30       	cpi	r24, 0x05	; 5
     b8a:	81 f4       	brne	.+32     	; 0xbac <actuate_devices+0x13c>
	{
		if (function_type == 0x00)
     b8c:	80 91 11 02 	lds	r24, 0x0211
     b90:	88 23       	and	r24, r24
     b92:	21 f4       	brne	.+8      	; 0xb9c <actuate_devices+0x12c>
		{
			LED_bargraph_on(param_string[0]);
     b94:	80 91 5a 02 	lds	r24, 0x025A
     b98:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <LED_bargraph_on>
		}

		if (function_type == 0x01)
     b9c:	80 91 11 02 	lds	r24, 0x0211
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	21 f4       	brne	.+8      	; 0xbac <actuate_devices+0x13c>
		{
			LED_bargraph_off(param_string[0]);
     ba4:	80 91 5a 02 	lds	r24, 0x025A
     ba8:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <LED_bargraph_off>
		}
	}
	if (device_id == 0x06)     // lcd has device id = 6
     bac:	80 91 13 02 	lds	r24, 0x0213
     bb0:	86 30       	cpi	r24, 0x06	; 6
     bb2:	09 f0       	breq	.+2      	; 0xbb6 <actuate_devices+0x146>
     bb4:	48 c0       	rjmp	.+144    	; 0xc46 <actuate_devices+0x1d6>
	{
		int q=0;
		if (function_type == 0x00)
     bb6:	80 91 11 02 	lds	r24, 0x0211
     bba:	88 23       	and	r24, r24
     bbc:	e1 f4       	brne	.+56     	; 0xbf6 <actuate_devices+0x186>
		{
			lcd_set_4bit();
     bbe:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_set_4bit>
			lcd_init();
     bc2:	0e 94 03 01 	call	0x206	; 0x206 <lcd_init>
			lcd_cursor(1,1);
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	61 e0       	ldi	r22, 0x01	; 1
     bca:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_cursor>
			for (q=0;q<param_count_lower_nibbel;q++)
     bce:	80 91 85 02 	lds	r24, 0x0285
     bd2:	88 23       	and	r24, r24
     bd4:	81 f0       	breq	.+32     	; 0xbf6 <actuate_devices+0x186>
     bd6:	0a e5       	ldi	r16, 0x5A	; 90
     bd8:	12 e0       	ldi	r17, 0x02	; 2
     bda:	c0 e0       	ldi	r28, 0x00	; 0
     bdc:	d0 e0       	ldi	r29, 0x00	; 0
			{
				lcd_wr_char(param_string[q]);
     bde:	f8 01       	movw	r30, r16
     be0:	81 91       	ld	r24, Z+
     be2:	8f 01       	movw	r16, r30
     be4:	0e 94 18 01 	call	0x230	; 0x230 <lcd_wr_char>
		if (function_type == 0x00)
		{
			lcd_set_4bit();
			lcd_init();
			lcd_cursor(1,1);
			for (q=0;q<param_count_lower_nibbel;q++)
     be8:	21 96       	adiw	r28, 0x01	; 1
     bea:	80 91 85 02 	lds	r24, 0x0285
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	c8 17       	cp	r28, r24
     bf2:	d9 07       	cpc	r29, r25
     bf4:	a4 f3       	brlt	.-24     	; 0xbde <actuate_devices+0x16e>
			{
				lcd_wr_char(param_string[q]);
			}
			
		}	
		if (function_type == 0x01)
     bf6:	80 91 11 02 	lds	r24, 0x0211
     bfa:	81 30       	cpi	r24, 0x01	; 1
     bfc:	e1 f4       	brne	.+56     	; 0xc36 <actuate_devices+0x1c6>
		{
			lcd_set_4bit();
     bfe:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_set_4bit>
			lcd_init();
     c02:	0e 94 03 01 	call	0x206	; 0x206 <lcd_init>
			lcd_cursor(2,1);
     c06:	82 e0       	ldi	r24, 0x02	; 2
     c08:	61 e0       	ldi	r22, 0x01	; 1
     c0a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_cursor>
			for (q=0;q<param_count_lower_nibbel;q++)
     c0e:	80 91 85 02 	lds	r24, 0x0285
     c12:	88 23       	and	r24, r24
     c14:	81 f0       	breq	.+32     	; 0xc36 <actuate_devices+0x1c6>
     c16:	0a e5       	ldi	r16, 0x5A	; 90
     c18:	12 e0       	ldi	r17, 0x02	; 2
     c1a:	c0 e0       	ldi	r28, 0x00	; 0
     c1c:	d0 e0       	ldi	r29, 0x00	; 0
			{
				lcd_wr_char(param_string[q]);
     c1e:	f8 01       	movw	r30, r16
     c20:	81 91       	ld	r24, Z+
     c22:	8f 01       	movw	r16, r30
     c24:	0e 94 18 01 	call	0x230	; 0x230 <lcd_wr_char>
		if (function_type == 0x01)
		{
			lcd_set_4bit();
			lcd_init();
			lcd_cursor(2,1);
			for (q=0;q<param_count_lower_nibbel;q++)
     c28:	21 96       	adiw	r28, 0x01	; 1
     c2a:	80 91 85 02 	lds	r24, 0x0285
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	c8 17       	cp	r28, r24
     c32:	d9 07       	cpc	r29, r25
     c34:	a4 f3       	brlt	.-24     	; 0xc1e <actuate_devices+0x1ae>
			{
				lcd_wr_char(param_string[q]);
			}
		}
		if (function_type == 0x02)
     c36:	80 91 11 02 	lds	r24, 0x0211
     c3a:	82 30       	cpi	r24, 0x02	; 2
     c3c:	21 f4       	brne	.+8      	; 0xc46 <actuate_devices+0x1d6>
		{
			lcd_set_4bit();
     c3e:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_set_4bit>
			lcd_init();
     c42:	0e 94 03 01 	call	0x206	; 0x206 <lcd_init>
		}			
		
	}
	
	
}
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	08 95       	ret

00000c50 <decode_data>:

void decode_data(void)
{
	int q=0;
	while (data_copied == 1)
     c50:	80 91 14 02 	lds	r24, 0x0214
     c54:	81 30       	cpi	r24, 0x01	; 1
     c56:	09 f0       	breq	.+2      	; 0xc5a <decode_data+0xa>
     c58:	3f c0       	rjmp	.+126    	; 0xcd8 <decode_data+0x88>
	{
		device_id = copy_packet_data[0];
     c5a:	80 91 19 02 	lds	r24, 0x0219
     c5e:	80 93 13 02 	sts	0x0213, r24
		device_type = copy_packet_data[1];
     c62:	80 91 1a 02 	lds	r24, 0x021A
     c66:	80 93 12 02 	sts	0x0212, r24
		function_type = copy_packet_data[2];
     c6a:	80 91 1b 02 	lds	r24, 0x021B
     c6e:	80 93 11 02 	sts	0x0211, r24
		param_count = copy_packet_data[3];
     c72:	80 91 1c 02 	lds	r24, 0x021C
     c76:	80 93 10 02 	sts	0x0210, r24
		param_count_upper_nibbel = param_count & 0x10;
     c7a:	98 2f       	mov	r25, r24
     c7c:	90 71       	andi	r25, 0x10	; 16
     c7e:	90 93 54 02 	sts	0x0254, r25
		param_count_lower_nibbel = (unsigned char)(param_count & 0x0F);
     c82:	28 2f       	mov	r18, r24
     c84:	2f 70       	andi	r18, 0x0F	; 15
     c86:	20 93 85 02 	sts	0x0285, r18
		
		if ((param_count & 0x10) == 0x10)
     c8a:	84 fd       	sbrc	r24, 4
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <decode_data+0x48>
			param_1 = 256*temp_2 + temp_1;	
		}
		
		else
		{
			for (q=1; q<=param_count_lower_nibbel; q++)
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	12 16       	cp	r1, r18
     c92:	13 06       	cpc	r1, r19
     c94:	94 f0       	brlt	.+36     	; 0xcba <decode_data+0x6a>
     c96:	1d c0       	rjmp	.+58     	; 0xcd2 <decode_data+0x82>
		param_count_upper_nibbel = param_count & 0x10;
		param_count_lower_nibbel = (unsigned char)(param_count & 0x0F);
		
		if ((param_count & 0x10) == 0x10)
		{
			temp_1 = copy_packet_data[4];
     c98:	20 91 1d 02 	lds	r18, 0x021D
     c9c:	20 93 8a 02 	sts	0x028A, r18
			temp_2 = copy_packet_data[5];
     ca0:	30 91 1e 02 	lds	r19, 0x021E
     ca4:	30 93 53 02 	sts	0x0253, r19
			
			param_1 = 256*temp_2 + temp_1;	
     ca8:	93 2f       	mov	r25, r19
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	82 0f       	add	r24, r18
     cae:	91 1d       	adc	r25, r1
     cb0:	90 93 0f 02 	sts	0x020F, r25
     cb4:	80 93 0e 02 	sts	0x020E, r24
     cb8:	0c c0       	rjmp	.+24     	; 0xcd2 <decode_data+0x82>
     cba:	ed e1       	ldi	r30, 0x1D	; 29
     cbc:	f2 e0       	ldi	r31, 0x02	; 2
     cbe:	aa e5       	ldi	r26, 0x5A	; 90
     cc0:	b2 e0       	ldi	r27, 0x02	; 2
		}
		
		else
		{
			for (q=1; q<=param_count_lower_nibbel; q++)
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	90 e0       	ldi	r25, 0x00	; 0
			{
				param_string[q-1]=copy_packet_data[q+3]; 
     cc6:	41 91       	ld	r20, Z+
     cc8:	4d 93       	st	X+, r20
			param_1 = 256*temp_2 + temp_1;	
		}
		
		else
		{
			for (q=1; q<=param_count_lower_nibbel; q++)
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	28 17       	cp	r18, r24
     cce:	39 07       	cpc	r19, r25
     cd0:	d4 f7       	brge	.-12     	; 0xcc6 <decode_data+0x76>
			{
				param_string[q-1]=copy_packet_data[q+3]; 
			}
			
		}
		data_copied = 0;
     cd2:	10 92 14 02 	sts	0x0214, r1
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <decode_data+0x8c>
	//	UDR2 = 'D';
	}
	
	if ((data_copied == 0) && (device_type == 0x00))	// input devices such as sensors, which will send back data
     cd8:	88 23       	and	r24, r24
     cda:	61 f4       	brne	.+24     	; 0xcf4 <decode_data+0xa4>
     cdc:	80 91 12 02 	lds	r24, 0x0212
     ce0:	88 23       	and	r24, r24
     ce2:	31 f4       	brne	.+12     	; 0xcf0 <decode_data+0xa0>
	{
		send_sensor_data();
     ce4:	0e 94 8b 04 	call	0x916	; 0x916 <send_sensor_data>
     ce8:	08 95       	ret
	}
	
	else if ((data_copied == 0) && (device_type == 0x01)) // output devices such as buzzer, motors
	{
	//	UDR2 = 'A';
		actuate_devices();
     cea:	0e 94 38 05 	call	0xa70	; 0xa70 <actuate_devices>
     cee:	08 95       	ret
	if ((data_copied == 0) && (device_type == 0x00))	// input devices such as sensors, which will send back data
	{
		send_sensor_data();
	}
	
	else if ((data_copied == 0) && (device_type == 0x01)) // output devices such as buzzer, motors
     cf0:	81 30       	cpi	r24, 0x01	; 1
     cf2:	d9 f3       	breq	.-10     	; 0xcea <decode_data+0x9a>
     cf4:	08 95       	ret

00000cf6 <copy_data_packet>:
	}
}

void copy_data_packet()
{
	if (data_packet_received == 1)
     cf6:	80 91 15 02 	lds	r24, 0x0215
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	61 f4       	brne	.+24     	; 0xd16 <copy_data_packet+0x20>
		//{
			//copy_packet_data[j] = uart_data_buff[j];
			////UDR2 = copy_packet_data[j];
			//uart_data_buff[j] = 0;
		//}
		i=0;
     cfe:	10 92 17 02 	sts	0x0217, r1
		j=0;
     d02:	10 92 16 02 	sts	0x0216, r1
		data_packet_received = 0;
     d06:	10 92 15 02 	sts	0x0215, r1
		end_char_rec = 0;
     d0a:	10 92 18 02 	sts	0x0218, r1
		data_copied = 1;
     d0e:	80 93 14 02 	sts	0x0214, r24
		
	//	UDR2 = data_copied;
		decode_data();
     d12:	0e 94 28 06 	call	0xc50	; 0xc50 <decode_data>
     d16:	08 95       	ret

00000d18 <main>:
}

//Main Function
int main(void)
{
	init_devices();
     d18:	0e 94 07 03 	call	0x60e	; 0x60e <init_devices>
	while(1)
	{
		copy_data_packet();
     d1c:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <copy_data_packet>
     d20:	fd cf       	rjmp	.-6      	; 0xd1c <main+0x4>

00000d22 <__subsf3>:
     d22:	50 58       	subi	r21, 0x80	; 128

00000d24 <__addsf3>:
     d24:	bb 27       	eor	r27, r27
     d26:	aa 27       	eor	r26, r26
     d28:	0e d0       	rcall	.+28     	; 0xd46 <__addsf3x>
     d2a:	48 c1       	rjmp	.+656    	; 0xfbc <__fp_round>
     d2c:	39 d1       	rcall	.+626    	; 0xfa0 <__fp_pscA>
     d2e:	30 f0       	brcs	.+12     	; 0xd3c <__addsf3+0x18>
     d30:	3e d1       	rcall	.+636    	; 0xfae <__fp_pscB>
     d32:	20 f0       	brcs	.+8      	; 0xd3c <__addsf3+0x18>
     d34:	31 f4       	brne	.+12     	; 0xd42 <__addsf3+0x1e>
     d36:	9f 3f       	cpi	r25, 0xFF	; 255
     d38:	11 f4       	brne	.+4      	; 0xd3e <__addsf3+0x1a>
     d3a:	1e f4       	brtc	.+6      	; 0xd42 <__addsf3+0x1e>
     d3c:	2e c1       	rjmp	.+604    	; 0xf9a <__fp_nan>
     d3e:	0e f4       	brtc	.+2      	; 0xd42 <__addsf3+0x1e>
     d40:	e0 95       	com	r30
     d42:	e7 fb       	bst	r30, 7
     d44:	24 c1       	rjmp	.+584    	; 0xf8e <__fp_inf>

00000d46 <__addsf3x>:
     d46:	e9 2f       	mov	r30, r25
     d48:	4a d1       	rcall	.+660    	; 0xfde <__fp_split3>
     d4a:	80 f3       	brcs	.-32     	; 0xd2c <__addsf3+0x8>
     d4c:	ba 17       	cp	r27, r26
     d4e:	62 07       	cpc	r22, r18
     d50:	73 07       	cpc	r23, r19
     d52:	84 07       	cpc	r24, r20
     d54:	95 07       	cpc	r25, r21
     d56:	18 f0       	brcs	.+6      	; 0xd5e <__addsf3x+0x18>
     d58:	71 f4       	brne	.+28     	; 0xd76 <__addsf3x+0x30>
     d5a:	9e f5       	brtc	.+102    	; 0xdc2 <__addsf3x+0x7c>
     d5c:	62 c1       	rjmp	.+708    	; 0x1022 <__fp_zero>
     d5e:	0e f4       	brtc	.+2      	; 0xd62 <__addsf3x+0x1c>
     d60:	e0 95       	com	r30
     d62:	0b 2e       	mov	r0, r27
     d64:	ba 2f       	mov	r27, r26
     d66:	a0 2d       	mov	r26, r0
     d68:	0b 01       	movw	r0, r22
     d6a:	b9 01       	movw	r22, r18
     d6c:	90 01       	movw	r18, r0
     d6e:	0c 01       	movw	r0, r24
     d70:	ca 01       	movw	r24, r20
     d72:	a0 01       	movw	r20, r0
     d74:	11 24       	eor	r1, r1
     d76:	ff 27       	eor	r31, r31
     d78:	59 1b       	sub	r21, r25
     d7a:	99 f0       	breq	.+38     	; 0xda2 <__addsf3x+0x5c>
     d7c:	59 3f       	cpi	r21, 0xF9	; 249
     d7e:	50 f4       	brcc	.+20     	; 0xd94 <__addsf3x+0x4e>
     d80:	50 3e       	cpi	r21, 0xE0	; 224
     d82:	68 f1       	brcs	.+90     	; 0xdde <__addsf3x+0x98>
     d84:	1a 16       	cp	r1, r26
     d86:	f0 40       	sbci	r31, 0x00	; 0
     d88:	a2 2f       	mov	r26, r18
     d8a:	23 2f       	mov	r18, r19
     d8c:	34 2f       	mov	r19, r20
     d8e:	44 27       	eor	r20, r20
     d90:	58 5f       	subi	r21, 0xF8	; 248
     d92:	f3 cf       	rjmp	.-26     	; 0xd7a <__addsf3x+0x34>
     d94:	46 95       	lsr	r20
     d96:	37 95       	ror	r19
     d98:	27 95       	ror	r18
     d9a:	a7 95       	ror	r26
     d9c:	f0 40       	sbci	r31, 0x00	; 0
     d9e:	53 95       	inc	r21
     da0:	c9 f7       	brne	.-14     	; 0xd94 <__addsf3x+0x4e>
     da2:	7e f4       	brtc	.+30     	; 0xdc2 <__addsf3x+0x7c>
     da4:	1f 16       	cp	r1, r31
     da6:	ba 0b       	sbc	r27, r26
     da8:	62 0b       	sbc	r22, r18
     daa:	73 0b       	sbc	r23, r19
     dac:	84 0b       	sbc	r24, r20
     dae:	ba f0       	brmi	.+46     	; 0xdde <__addsf3x+0x98>
     db0:	91 50       	subi	r25, 0x01	; 1
     db2:	a1 f0       	breq	.+40     	; 0xddc <__addsf3x+0x96>
     db4:	ff 0f       	add	r31, r31
     db6:	bb 1f       	adc	r27, r27
     db8:	66 1f       	adc	r22, r22
     dba:	77 1f       	adc	r23, r23
     dbc:	88 1f       	adc	r24, r24
     dbe:	c2 f7       	brpl	.-16     	; 0xdb0 <__addsf3x+0x6a>
     dc0:	0e c0       	rjmp	.+28     	; 0xdde <__addsf3x+0x98>
     dc2:	ba 0f       	add	r27, r26
     dc4:	62 1f       	adc	r22, r18
     dc6:	73 1f       	adc	r23, r19
     dc8:	84 1f       	adc	r24, r20
     dca:	48 f4       	brcc	.+18     	; 0xdde <__addsf3x+0x98>
     dcc:	87 95       	ror	r24
     dce:	77 95       	ror	r23
     dd0:	67 95       	ror	r22
     dd2:	b7 95       	ror	r27
     dd4:	f7 95       	ror	r31
     dd6:	9e 3f       	cpi	r25, 0xFE	; 254
     dd8:	08 f0       	brcs	.+2      	; 0xddc <__addsf3x+0x96>
     dda:	b3 cf       	rjmp	.-154    	; 0xd42 <__addsf3+0x1e>
     ddc:	93 95       	inc	r25
     dde:	88 0f       	add	r24, r24
     de0:	08 f0       	brcs	.+2      	; 0xde4 <__addsf3x+0x9e>
     de2:	99 27       	eor	r25, r25
     de4:	ee 0f       	add	r30, r30
     de6:	97 95       	ror	r25
     de8:	87 95       	ror	r24
     dea:	08 95       	ret

00000dec <__divsf3>:
     dec:	0c d0       	rcall	.+24     	; 0xe06 <__divsf3x>
     dee:	e6 c0       	rjmp	.+460    	; 0xfbc <__fp_round>
     df0:	de d0       	rcall	.+444    	; 0xfae <__fp_pscB>
     df2:	40 f0       	brcs	.+16     	; 0xe04 <__divsf3+0x18>
     df4:	d5 d0       	rcall	.+426    	; 0xfa0 <__fp_pscA>
     df6:	30 f0       	brcs	.+12     	; 0xe04 <__divsf3+0x18>
     df8:	21 f4       	brne	.+8      	; 0xe02 <__divsf3+0x16>
     dfa:	5f 3f       	cpi	r21, 0xFF	; 255
     dfc:	19 f0       	breq	.+6      	; 0xe04 <__divsf3+0x18>
     dfe:	c7 c0       	rjmp	.+398    	; 0xf8e <__fp_inf>
     e00:	51 11       	cpse	r21, r1
     e02:	10 c1       	rjmp	.+544    	; 0x1024 <__fp_szero>
     e04:	ca c0       	rjmp	.+404    	; 0xf9a <__fp_nan>

00000e06 <__divsf3x>:
     e06:	eb d0       	rcall	.+470    	; 0xfde <__fp_split3>
     e08:	98 f3       	brcs	.-26     	; 0xdf0 <__divsf3+0x4>

00000e0a <__divsf3_pse>:
     e0a:	99 23       	and	r25, r25
     e0c:	c9 f3       	breq	.-14     	; 0xe00 <__divsf3+0x14>
     e0e:	55 23       	and	r21, r21
     e10:	b1 f3       	breq	.-20     	; 0xdfe <__divsf3+0x12>
     e12:	95 1b       	sub	r25, r21
     e14:	55 0b       	sbc	r21, r21
     e16:	bb 27       	eor	r27, r27
     e18:	aa 27       	eor	r26, r26
     e1a:	62 17       	cp	r22, r18
     e1c:	73 07       	cpc	r23, r19
     e1e:	84 07       	cpc	r24, r20
     e20:	38 f0       	brcs	.+14     	; 0xe30 <__divsf3_pse+0x26>
     e22:	9f 5f       	subi	r25, 0xFF	; 255
     e24:	5f 4f       	sbci	r21, 0xFF	; 255
     e26:	22 0f       	add	r18, r18
     e28:	33 1f       	adc	r19, r19
     e2a:	44 1f       	adc	r20, r20
     e2c:	aa 1f       	adc	r26, r26
     e2e:	a9 f3       	breq	.-22     	; 0xe1a <__divsf3_pse+0x10>
     e30:	33 d0       	rcall	.+102    	; 0xe98 <__divsf3_pse+0x8e>
     e32:	0e 2e       	mov	r0, r30
     e34:	3a f0       	brmi	.+14     	; 0xe44 <__divsf3_pse+0x3a>
     e36:	e0 e8       	ldi	r30, 0x80	; 128
     e38:	30 d0       	rcall	.+96     	; 0xe9a <__divsf3_pse+0x90>
     e3a:	91 50       	subi	r25, 0x01	; 1
     e3c:	50 40       	sbci	r21, 0x00	; 0
     e3e:	e6 95       	lsr	r30
     e40:	00 1c       	adc	r0, r0
     e42:	ca f7       	brpl	.-14     	; 0xe36 <__divsf3_pse+0x2c>
     e44:	29 d0       	rcall	.+82     	; 0xe98 <__divsf3_pse+0x8e>
     e46:	fe 2f       	mov	r31, r30
     e48:	27 d0       	rcall	.+78     	; 0xe98 <__divsf3_pse+0x8e>
     e4a:	66 0f       	add	r22, r22
     e4c:	77 1f       	adc	r23, r23
     e4e:	88 1f       	adc	r24, r24
     e50:	bb 1f       	adc	r27, r27
     e52:	26 17       	cp	r18, r22
     e54:	37 07       	cpc	r19, r23
     e56:	48 07       	cpc	r20, r24
     e58:	ab 07       	cpc	r26, r27
     e5a:	b0 e8       	ldi	r27, 0x80	; 128
     e5c:	09 f0       	breq	.+2      	; 0xe60 <__divsf3_pse+0x56>
     e5e:	bb 0b       	sbc	r27, r27
     e60:	80 2d       	mov	r24, r0
     e62:	bf 01       	movw	r22, r30
     e64:	ff 27       	eor	r31, r31
     e66:	93 58       	subi	r25, 0x83	; 131
     e68:	5f 4f       	sbci	r21, 0xFF	; 255
     e6a:	2a f0       	brmi	.+10     	; 0xe76 <__divsf3_pse+0x6c>
     e6c:	9e 3f       	cpi	r25, 0xFE	; 254
     e6e:	51 05       	cpc	r21, r1
     e70:	68 f0       	brcs	.+26     	; 0xe8c <__divsf3_pse+0x82>
     e72:	8d c0       	rjmp	.+282    	; 0xf8e <__fp_inf>
     e74:	d7 c0       	rjmp	.+430    	; 0x1024 <__fp_szero>
     e76:	5f 3f       	cpi	r21, 0xFF	; 255
     e78:	ec f3       	brlt	.-6      	; 0xe74 <__divsf3_pse+0x6a>
     e7a:	98 3e       	cpi	r25, 0xE8	; 232
     e7c:	dc f3       	brlt	.-10     	; 0xe74 <__divsf3_pse+0x6a>
     e7e:	86 95       	lsr	r24
     e80:	77 95       	ror	r23
     e82:	67 95       	ror	r22
     e84:	b7 95       	ror	r27
     e86:	f7 95       	ror	r31
     e88:	9f 5f       	subi	r25, 0xFF	; 255
     e8a:	c9 f7       	brne	.-14     	; 0xe7e <__divsf3_pse+0x74>
     e8c:	88 0f       	add	r24, r24
     e8e:	91 1d       	adc	r25, r1
     e90:	96 95       	lsr	r25
     e92:	87 95       	ror	r24
     e94:	97 f9       	bld	r25, 7
     e96:	08 95       	ret
     e98:	e1 e0       	ldi	r30, 0x01	; 1
     e9a:	66 0f       	add	r22, r22
     e9c:	77 1f       	adc	r23, r23
     e9e:	88 1f       	adc	r24, r24
     ea0:	bb 1f       	adc	r27, r27
     ea2:	62 17       	cp	r22, r18
     ea4:	73 07       	cpc	r23, r19
     ea6:	84 07       	cpc	r24, r20
     ea8:	ba 07       	cpc	r27, r26
     eaa:	20 f0       	brcs	.+8      	; 0xeb4 <__divsf3_pse+0xaa>
     eac:	62 1b       	sub	r22, r18
     eae:	73 0b       	sbc	r23, r19
     eb0:	84 0b       	sbc	r24, r20
     eb2:	ba 0b       	sbc	r27, r26
     eb4:	ee 1f       	adc	r30, r30
     eb6:	88 f7       	brcc	.-30     	; 0xe9a <__divsf3_pse+0x90>
     eb8:	e0 95       	com	r30
     eba:	08 95       	ret

00000ebc <__fixunssfsi>:
     ebc:	98 d0       	rcall	.+304    	; 0xfee <__fp_splitA>
     ebe:	88 f0       	brcs	.+34     	; 0xee2 <__fixunssfsi+0x26>
     ec0:	9f 57       	subi	r25, 0x7F	; 127
     ec2:	90 f0       	brcs	.+36     	; 0xee8 <__fixunssfsi+0x2c>
     ec4:	b9 2f       	mov	r27, r25
     ec6:	99 27       	eor	r25, r25
     ec8:	b7 51       	subi	r27, 0x17	; 23
     eca:	a0 f0       	brcs	.+40     	; 0xef4 <__fixunssfsi+0x38>
     ecc:	d1 f0       	breq	.+52     	; 0xf02 <__fixunssfsi+0x46>
     ece:	66 0f       	add	r22, r22
     ed0:	77 1f       	adc	r23, r23
     ed2:	88 1f       	adc	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	1a f0       	brmi	.+6      	; 0xede <__fixunssfsi+0x22>
     ed8:	ba 95       	dec	r27
     eda:	c9 f7       	brne	.-14     	; 0xece <__fixunssfsi+0x12>
     edc:	12 c0       	rjmp	.+36     	; 0xf02 <__fixunssfsi+0x46>
     ede:	b1 30       	cpi	r27, 0x01	; 1
     ee0:	81 f0       	breq	.+32     	; 0xf02 <__fixunssfsi+0x46>
     ee2:	9f d0       	rcall	.+318    	; 0x1022 <__fp_zero>
     ee4:	b1 e0       	ldi	r27, 0x01	; 1
     ee6:	08 95       	ret
     ee8:	9c c0       	rjmp	.+312    	; 0x1022 <__fp_zero>
     eea:	67 2f       	mov	r22, r23
     eec:	78 2f       	mov	r23, r24
     eee:	88 27       	eor	r24, r24
     ef0:	b8 5f       	subi	r27, 0xF8	; 248
     ef2:	39 f0       	breq	.+14     	; 0xf02 <__fixunssfsi+0x46>
     ef4:	b9 3f       	cpi	r27, 0xF9	; 249
     ef6:	cc f3       	brlt	.-14     	; 0xeea <__fixunssfsi+0x2e>
     ef8:	86 95       	lsr	r24
     efa:	77 95       	ror	r23
     efc:	67 95       	ror	r22
     efe:	b3 95       	inc	r27
     f00:	d9 f7       	brne	.-10     	; 0xef8 <__fixunssfsi+0x3c>
     f02:	3e f4       	brtc	.+14     	; 0xf12 <__fixunssfsi+0x56>
     f04:	90 95       	com	r25
     f06:	80 95       	com	r24
     f08:	70 95       	com	r23
     f0a:	61 95       	neg	r22
     f0c:	7f 4f       	sbci	r23, 0xFF	; 255
     f0e:	8f 4f       	sbci	r24, 0xFF	; 255
     f10:	9f 4f       	sbci	r25, 0xFF	; 255
     f12:	08 95       	ret

00000f14 <__floatunsisf>:
     f14:	e8 94       	clt
     f16:	09 c0       	rjmp	.+18     	; 0xf2a <__floatsisf+0x12>

00000f18 <__floatsisf>:
     f18:	97 fb       	bst	r25, 7
     f1a:	3e f4       	brtc	.+14     	; 0xf2a <__floatsisf+0x12>
     f1c:	90 95       	com	r25
     f1e:	80 95       	com	r24
     f20:	70 95       	com	r23
     f22:	61 95       	neg	r22
     f24:	7f 4f       	sbci	r23, 0xFF	; 255
     f26:	8f 4f       	sbci	r24, 0xFF	; 255
     f28:	9f 4f       	sbci	r25, 0xFF	; 255
     f2a:	99 23       	and	r25, r25
     f2c:	a9 f0       	breq	.+42     	; 0xf58 <__floatsisf+0x40>
     f2e:	f9 2f       	mov	r31, r25
     f30:	96 e9       	ldi	r25, 0x96	; 150
     f32:	bb 27       	eor	r27, r27
     f34:	93 95       	inc	r25
     f36:	f6 95       	lsr	r31
     f38:	87 95       	ror	r24
     f3a:	77 95       	ror	r23
     f3c:	67 95       	ror	r22
     f3e:	b7 95       	ror	r27
     f40:	f1 11       	cpse	r31, r1
     f42:	f8 cf       	rjmp	.-16     	; 0xf34 <__floatsisf+0x1c>
     f44:	fa f4       	brpl	.+62     	; 0xf84 <__floatsisf+0x6c>
     f46:	bb 0f       	add	r27, r27
     f48:	11 f4       	brne	.+4      	; 0xf4e <__floatsisf+0x36>
     f4a:	60 ff       	sbrs	r22, 0
     f4c:	1b c0       	rjmp	.+54     	; 0xf84 <__floatsisf+0x6c>
     f4e:	6f 5f       	subi	r22, 0xFF	; 255
     f50:	7f 4f       	sbci	r23, 0xFF	; 255
     f52:	8f 4f       	sbci	r24, 0xFF	; 255
     f54:	9f 4f       	sbci	r25, 0xFF	; 255
     f56:	16 c0       	rjmp	.+44     	; 0xf84 <__floatsisf+0x6c>
     f58:	88 23       	and	r24, r24
     f5a:	11 f0       	breq	.+4      	; 0xf60 <__floatsisf+0x48>
     f5c:	96 e9       	ldi	r25, 0x96	; 150
     f5e:	11 c0       	rjmp	.+34     	; 0xf82 <__floatsisf+0x6a>
     f60:	77 23       	and	r23, r23
     f62:	21 f0       	breq	.+8      	; 0xf6c <__floatsisf+0x54>
     f64:	9e e8       	ldi	r25, 0x8E	; 142
     f66:	87 2f       	mov	r24, r23
     f68:	76 2f       	mov	r23, r22
     f6a:	05 c0       	rjmp	.+10     	; 0xf76 <__floatsisf+0x5e>
     f6c:	66 23       	and	r22, r22
     f6e:	71 f0       	breq	.+28     	; 0xf8c <__floatsisf+0x74>
     f70:	96 e8       	ldi	r25, 0x86	; 134
     f72:	86 2f       	mov	r24, r22
     f74:	70 e0       	ldi	r23, 0x00	; 0
     f76:	60 e0       	ldi	r22, 0x00	; 0
     f78:	2a f0       	brmi	.+10     	; 0xf84 <__floatsisf+0x6c>
     f7a:	9a 95       	dec	r25
     f7c:	66 0f       	add	r22, r22
     f7e:	77 1f       	adc	r23, r23
     f80:	88 1f       	adc	r24, r24
     f82:	da f7       	brpl	.-10     	; 0xf7a <__floatsisf+0x62>
     f84:	88 0f       	add	r24, r24
     f86:	96 95       	lsr	r25
     f88:	87 95       	ror	r24
     f8a:	97 f9       	bld	r25, 7
     f8c:	08 95       	ret

00000f8e <__fp_inf>:
     f8e:	97 f9       	bld	r25, 7
     f90:	9f 67       	ori	r25, 0x7F	; 127
     f92:	80 e8       	ldi	r24, 0x80	; 128
     f94:	70 e0       	ldi	r23, 0x00	; 0
     f96:	60 e0       	ldi	r22, 0x00	; 0
     f98:	08 95       	ret

00000f9a <__fp_nan>:
     f9a:	9f ef       	ldi	r25, 0xFF	; 255
     f9c:	80 ec       	ldi	r24, 0xC0	; 192
     f9e:	08 95       	ret

00000fa0 <__fp_pscA>:
     fa0:	00 24       	eor	r0, r0
     fa2:	0a 94       	dec	r0
     fa4:	16 16       	cp	r1, r22
     fa6:	17 06       	cpc	r1, r23
     fa8:	18 06       	cpc	r1, r24
     faa:	09 06       	cpc	r0, r25
     fac:	08 95       	ret

00000fae <__fp_pscB>:
     fae:	00 24       	eor	r0, r0
     fb0:	0a 94       	dec	r0
     fb2:	12 16       	cp	r1, r18
     fb4:	13 06       	cpc	r1, r19
     fb6:	14 06       	cpc	r1, r20
     fb8:	05 06       	cpc	r0, r21
     fba:	08 95       	ret

00000fbc <__fp_round>:
     fbc:	09 2e       	mov	r0, r25
     fbe:	03 94       	inc	r0
     fc0:	00 0c       	add	r0, r0
     fc2:	11 f4       	brne	.+4      	; 0xfc8 <__fp_round+0xc>
     fc4:	88 23       	and	r24, r24
     fc6:	52 f0       	brmi	.+20     	; 0xfdc <__fp_round+0x20>
     fc8:	bb 0f       	add	r27, r27
     fca:	40 f4       	brcc	.+16     	; 0xfdc <__fp_round+0x20>
     fcc:	bf 2b       	or	r27, r31
     fce:	11 f4       	brne	.+4      	; 0xfd4 <__fp_round+0x18>
     fd0:	60 ff       	sbrs	r22, 0
     fd2:	04 c0       	rjmp	.+8      	; 0xfdc <__fp_round+0x20>
     fd4:	6f 5f       	subi	r22, 0xFF	; 255
     fd6:	7f 4f       	sbci	r23, 0xFF	; 255
     fd8:	8f 4f       	sbci	r24, 0xFF	; 255
     fda:	9f 4f       	sbci	r25, 0xFF	; 255
     fdc:	08 95       	ret

00000fde <__fp_split3>:
     fde:	57 fd       	sbrc	r21, 7
     fe0:	90 58       	subi	r25, 0x80	; 128
     fe2:	44 0f       	add	r20, r20
     fe4:	55 1f       	adc	r21, r21
     fe6:	59 f0       	breq	.+22     	; 0xffe <__fp_splitA+0x10>
     fe8:	5f 3f       	cpi	r21, 0xFF	; 255
     fea:	71 f0       	breq	.+28     	; 0x1008 <__fp_splitA+0x1a>
     fec:	47 95       	ror	r20

00000fee <__fp_splitA>:
     fee:	88 0f       	add	r24, r24
     ff0:	97 fb       	bst	r25, 7
     ff2:	99 1f       	adc	r25, r25
     ff4:	61 f0       	breq	.+24     	; 0x100e <__fp_splitA+0x20>
     ff6:	9f 3f       	cpi	r25, 0xFF	; 255
     ff8:	79 f0       	breq	.+30     	; 0x1018 <__fp_splitA+0x2a>
     ffa:	87 95       	ror	r24
     ffc:	08 95       	ret
     ffe:	12 16       	cp	r1, r18
    1000:	13 06       	cpc	r1, r19
    1002:	14 06       	cpc	r1, r20
    1004:	55 1f       	adc	r21, r21
    1006:	f2 cf       	rjmp	.-28     	; 0xfec <__fp_split3+0xe>
    1008:	46 95       	lsr	r20
    100a:	f1 df       	rcall	.-30     	; 0xfee <__fp_splitA>
    100c:	08 c0       	rjmp	.+16     	; 0x101e <__fp_splitA+0x30>
    100e:	16 16       	cp	r1, r22
    1010:	17 06       	cpc	r1, r23
    1012:	18 06       	cpc	r1, r24
    1014:	99 1f       	adc	r25, r25
    1016:	f1 cf       	rjmp	.-30     	; 0xffa <__fp_splitA+0xc>
    1018:	86 95       	lsr	r24
    101a:	71 05       	cpc	r23, r1
    101c:	61 05       	cpc	r22, r1
    101e:	08 94       	sec
    1020:	08 95       	ret

00001022 <__fp_zero>:
    1022:	e8 94       	clt

00001024 <__fp_szero>:
    1024:	bb 27       	eor	r27, r27
    1026:	66 27       	eor	r22, r22
    1028:	77 27       	eor	r23, r23
    102a:	cb 01       	movw	r24, r22
    102c:	97 f9       	bld	r25, 7
    102e:	08 95       	ret

00001030 <__udivmodhi4>:
    1030:	aa 1b       	sub	r26, r26
    1032:	bb 1b       	sub	r27, r27
    1034:	51 e1       	ldi	r21, 0x11	; 17
    1036:	07 c0       	rjmp	.+14     	; 0x1046 <__udivmodhi4_ep>

00001038 <__udivmodhi4_loop>:
    1038:	aa 1f       	adc	r26, r26
    103a:	bb 1f       	adc	r27, r27
    103c:	a6 17       	cp	r26, r22
    103e:	b7 07       	cpc	r27, r23
    1040:	10 f0       	brcs	.+4      	; 0x1046 <__udivmodhi4_ep>
    1042:	a6 1b       	sub	r26, r22
    1044:	b7 0b       	sbc	r27, r23

00001046 <__udivmodhi4_ep>:
    1046:	88 1f       	adc	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	5a 95       	dec	r21
    104c:	a9 f7       	brne	.-22     	; 0x1038 <__udivmodhi4_loop>
    104e:	80 95       	com	r24
    1050:	90 95       	com	r25
    1052:	bc 01       	movw	r22, r24
    1054:	cd 01       	movw	r24, r26
    1056:	08 95       	ret

00001058 <_exit>:
    1058:	f8 94       	cli

0000105a <__stop_program>:
    105a:	ff cf       	rjmp	.-2      	; 0x105a <__stop_program>
